// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Cross-platform bindings for liboqs
class LibOQSBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibOQSBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibOQSBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Checks if the CPU supports a given extension
  ///
  /// \return 1 if the given CPU extension is available, 0 otherwise.
  int OQS_CPU_has_extension(
    OQS_CPU_EXT ext,
  ) {
    return _OQS_CPU_has_extension(
      ext.value,
    );
  }

  late final _OQS_CPU_has_extensionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'OQS_CPU_has_extension');
  late final _OQS_CPU_has_extension =
      _OQS_CPU_has_extensionPtr.asFunction<int Function(int)>();

  /// This currently sets the values in the OQS_CPU_EXTENSIONS
  /// and prefetches the OpenSSL objects if necessary.
  void OQS_init() {
    return _OQS_init();
  }

  late final _OQS_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OQS_init');
  late final _OQS_init = _OQS_initPtr.asFunction<void Function()>();

  /// This function stops OpenSSL threads, which allows resources
  /// to be cleaned up in the correct order.
  /// @note When liboqs is used in a multithreaded application,
  /// each thread should call this function prior to stopping.
  void OQS_thread_stop() {
    return _OQS_thread_stop();
  }

  late final _OQS_thread_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OQS_thread_stop');
  late final _OQS_thread_stop =
      _OQS_thread_stopPtr.asFunction<void Function()>();

  /// This function frees prefetched OpenSSL objects
  void OQS_destroy() {
    return _OQS_destroy();
  }

  late final _OQS_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OQS_destroy');
  late final _OQS_destroy = _OQS_destroyPtr.asFunction<void Function()>();

  /// Return library version string.
  ffi.Pointer<ffi.Char> OQS_version() {
    return _OQS_version();
  }

  late final _OQS_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'OQS_version');
  late final _OQS_version =
      _OQS_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Allocates memory of a given size.
  /// @param size The size of the memory to be allocated in bytes.
  /// @return A pointer to the allocated memory.
  ffi.Pointer<ffi.Void> OQS_MEM_malloc(
    int size,
  ) {
    return _OQS_MEM_malloc(
      size,
    );
  }

  late final _OQS_MEM_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'OQS_MEM_malloc');
  late final _OQS_MEM_malloc =
      _OQS_MEM_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// Allocates memory for an array of elements of a given size.
  /// @param num_elements The number of elements to allocate.
  /// @param element_size The size of each element in bytes.
  /// @return A pointer to the allocated memory.
  ffi.Pointer<ffi.Void> OQS_MEM_calloc(
    int num_elements,
    int element_size,
  ) {
    return _OQS_MEM_calloc(
      num_elements,
      element_size,
    );
  }

  late final _OQS_MEM_callocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'OQS_MEM_calloc');
  late final _OQS_MEM_calloc =
      _OQS_MEM_callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  /// Duplicates a string.
  /// @param str The string to be duplicated.
  /// @return A pointer to the newly allocated string.
  ffi.Pointer<ffi.Char> OQS_MEM_strdup(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _OQS_MEM_strdup(
      str,
    );
  }

  late final _OQS_MEM_strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('OQS_MEM_strdup');
  late final _OQS_MEM_strdup = _OQS_MEM_strdupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// Constant time comparison of byte sequences `a` and `b` of length `len`.
  /// Returns 0 if the byte sequences are equal or if `len`=0.
  /// Returns 1 otherwise.
  ///
  /// @param[in] a A byte sequence of length at least `len`.
  /// @param[in] b A byte sequence of length at least `len`.
  /// @param[in] len The number of bytes to compare.
  int OQS_MEM_secure_bcmp(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
    int len,
  ) {
    return _OQS_MEM_secure_bcmp(
      a,
      b,
      len,
    );
  }

  late final _OQS_MEM_secure_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('OQS_MEM_secure_bcmp');
  late final _OQS_MEM_secure_bcmp = _OQS_MEM_secure_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// Zeros out `len` bytes of memory starting at `ptr`.
  ///
  /// Designed to be protected against optimizing compilers which try to remove
  /// "unnecessary" operations.  Should be used for all buffers containing secret
  /// data.
  ///
  /// @param[in] ptr The start of the memory to zero out.
  /// @param[in] len The number of bytes to zero out.
  void OQS_MEM_cleanse(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _OQS_MEM_cleanse(
      ptr,
      len,
    );
  }

  late final _OQS_MEM_cleansePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'OQS_MEM_cleanse');
  late final _OQS_MEM_cleanse = _OQS_MEM_cleansePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  /// Zeros out `len` bytes of memory starting at `ptr`, then frees `ptr`.
  ///
  /// Can be called with `ptr = NULL`, in which case no operation is performed.
  ///
  /// Designed to be protected against optimizing compilers which try to remove
  /// "unnecessary" operations.  Should be used for all buffers containing secret
  /// data.
  ///
  /// @param[in] ptr The start of the memory to zero out and free.
  /// @param[in] len The number of bytes to zero out.
  void OQS_MEM_secure_free(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _OQS_MEM_secure_free(
      ptr,
      len,
    );
  }

  late final _OQS_MEM_secure_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'OQS_MEM_secure_free');
  late final _OQS_MEM_secure_free = _OQS_MEM_secure_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  /// Frees `ptr`.
  ///
  /// Can be called with `ptr = NULL`, in which case no operation is performed.
  ///
  /// Should only be used on non-secret data.
  ///
  /// @param[in] ptr The start of the memory to free.
  void OQS_MEM_insecure_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _OQS_MEM_insecure_free(
      ptr,
    );
  }

  late final _OQS_MEM_insecure_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'OQS_MEM_insecure_free');
  late final _OQS_MEM_insecure_free = _OQS_MEM_insecure_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  /// Internal implementation of C11 aligned_alloc to work around compiler quirks.
  ///
  /// Allocates size bytes of uninitialized memory with a base pointer that is
  /// a multiple of alignment. Alignment must be a power of two and a multiple
  /// of sizeof(void *). Size must be a multiple of alignment.
  /// @note The allocated memory should be freed with `OQS_MEM_aligned_free` when
  /// it is no longer needed.
  ffi.Pointer<ffi.Void> OQS_MEM_aligned_alloc(
    int alignment,
    int size,
  ) {
    return _OQS_MEM_aligned_alloc(
      alignment,
      size,
    );
  }

  late final _OQS_MEM_aligned_allocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'OQS_MEM_aligned_alloc');
  late final _OQS_MEM_aligned_alloc = _OQS_MEM_aligned_allocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  /// Free memory allocated with OQS_MEM_aligned_alloc.
  void OQS_MEM_aligned_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _OQS_MEM_aligned_free(
      ptr,
    );
  }

  late final _OQS_MEM_aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'OQS_MEM_aligned_free');
  late final _OQS_MEM_aligned_free = _OQS_MEM_aligned_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  /// Free and zeroize memory allocated with OQS_MEM_aligned_alloc.
  void OQS_MEM_aligned_secure_free(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _OQS_MEM_aligned_secure_free(
      ptr,
      len,
    );
  }

  late final _OQS_MEM_aligned_secure_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'OQS_MEM_aligned_secure_free');
  late final _OQS_MEM_aligned_secure_free = _OQS_MEM_aligned_secure_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// Switches OQS_randombytes to use the specified algorithm.
  ///
  /// @warning In case you have set a custom algorithm using `OQS_randombytes_custom_algorithm`
  /// before, this function will overwrite it again. Hence, you have to set your custom
  /// algorithm again after calling this function.
  ///
  /// @param[in] algorithm The name of the algorithm to use.
  /// @return OQS_SUCCESS if `algorithm` is a supported algorithm name, OQS_ERROR otherwise.
  OQS_STATUS OQS_randombytes_switch_algorithm(
    ffi.Pointer<ffi.Char> algorithm,
  ) {
    return OQS_STATUS.fromValue(_OQS_randombytes_switch_algorithm(
      algorithm,
    ));
  }

  late final _OQS_randombytes_switch_algorithmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OQS_randombytes_switch_algorithm');
  late final _OQS_randombytes_switch_algorithm =
      _OQS_randombytes_switch_algorithmPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  /// Switches OQS_randombytes to use the given function.
  ///
  /// This allows additional custom RNGs besides the provided ones. The provided RNG
  /// function must have the same signature as `OQS_randombytes`.
  ///
  /// @param[in] algorithm_ptr Pointer to the RNG function to use.
  void OQS_randombytes_custom_algorithm(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>>
        algorithm_ptr,
  ) {
    return _OQS_randombytes_custom_algorithm(
      algorithm_ptr,
    );
  }

  late final _OQS_randombytes_custom_algorithmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Uint8>,
                          ffi.Size)>>)>>('OQS_randombytes_custom_algorithm');
  late final _OQS_randombytes_custom_algorithm =
      _OQS_randombytes_custom_algorithmPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>>)>();

  /// Fills the given memory with the requested number of (pseudo)random bytes.
  ///
  /// This implementation uses whichever algorithm has been selected by
  /// OQS_randombytes_switch_algorithm. The default is OQS_randombytes_system, which
  /// reads bytes from a system specific default source.
  ///
  /// The caller is responsible for providing a buffer allocated with sufficient room.
  ///
  /// @param[out] random_array Pointer to the memory to fill with (pseudo)random bytes
  /// @param[in] bytes_to_read The number of random bytes to read into memory
  void OQS_randombytes(
    ffi.Pointer<ffi.Uint8> random_array,
    int bytes_to_read,
  ) {
    return _OQS_randombytes(
      random_array,
      bytes_to_read,
    );
  }

  late final _OQS_randombytesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>>(
      'OQS_randombytes');
  late final _OQS_randombytes = _OQS_randombytesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Returns identifiers for available key encapsulation mechanisms in liboqs.  Used with OQS_KEM_new.
  ///
  /// Note that algorithm identifiers are present in this list even when the algorithm is disabled
  /// at compile time.
  ///
  /// @param[in] i Index of the algorithm identifier to return, 0 <= i < OQS_KEM_algs_length
  /// @return Algorithm identifier as a string, or NULL.
  ffi.Pointer<ffi.Char> OQS_KEM_alg_identifier(
    int i,
  ) {
    return _OQS_KEM_alg_identifier(
      i,
    );
  }

  late final _OQS_KEM_alg_identifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Size)>>(
          'OQS_KEM_alg_identifier');
  late final _OQS_KEM_alg_identifier = _OQS_KEM_alg_identifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  /// Returns the number of key encapsulation mechanisms in liboqs.  They can be enumerated with
  /// OQS_KEM_alg_identifier.
  ///
  /// Note that some mechanisms may be disabled at compile time.
  ///
  /// @return The number of key encapsulation mechanisms.
  int OQS_KEM_alg_count() {
    return _OQS_KEM_alg_count();
  }

  late final _OQS_KEM_alg_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OQS_KEM_alg_count');
  late final _OQS_KEM_alg_count =
      _OQS_KEM_alg_countPtr.asFunction<int Function()>();

  /// Indicates whether the specified algorithm was enabled at compile-time or not.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_KEM_algs`.
  /// @return 1 if enabled, 0 if disabled or not found
  int OQS_KEM_alg_is_enabled(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_KEM_alg_is_enabled(
      method_name,
    );
  }

  late final _OQS_KEM_alg_is_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OQS_KEM_alg_is_enabled');
  late final _OQS_KEM_alg_is_enabled = _OQS_KEM_alg_is_enabledPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// Constructs an OQS_KEM object for a particular algorithm.
  ///
  /// Callers should always check whether the return value is `NULL`, which indicates either than an
  /// invalid algorithm name was provided, or that the requested algorithm was disabled at compile-time.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_KEM_algs`.
  /// @return An OQS_KEM for the particular algorithm, or `NULL` if the algorithm has been disabled at compile-time.
  ffi.Pointer<OQS_KEM> OQS_KEM_new(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_KEM_new(
      method_name,
    );
  }

  late final _OQS_KEM_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OQS_KEM> Function(ffi.Pointer<ffi.Char>)>>('OQS_KEM_new');
  late final _OQS_KEM_new = _OQS_KEM_newPtr.asFunction<
      ffi.Pointer<OQS_KEM> Function(ffi.Pointer<ffi.Char>)>();

  /// Derandomized keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` and
  /// `secret_key`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_KEM_*_length_*`.
  ///
  /// @param[in] kem The OQS_KEM object representing the KEM.
  /// @param[out] public_key The public key represented as a byte string.
  /// @param[out] secret_key The secret key represented as a byte string.
  /// @param[in] seed The input randomness represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_KEM_keypair_derand(
    ffi.Pointer<OQS_KEM> kem,
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_keypair_derand(
      kem,
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_KEM>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_keypair_derand');
  late final _OQS_KEM_keypair_derand = _OQS_KEM_keypair_derandPtr.asFunction<
      int Function(ffi.Pointer<OQS_KEM>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` and
  /// `secret_key`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_KEM_*_length_*`.
  ///
  /// @param[in] kem The OQS_KEM object representing the KEM.
  /// @param[out] public_key The public key represented as a byte string.
  /// @param[out] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_KEM_keypair(
    ffi.Pointer<OQS_KEM> kem,
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_keypair(
      kem,
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OQS_KEM>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_keypair');
  late final _OQS_KEM_keypair = _OQS_KEM_keypairPtr.asFunction<
      int Function(ffi.Pointer<OQS_KEM>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  /// Encapsulation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `ciphertext` and
  /// `shared_secret`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_KEM_*_length_*`.
  ///
  /// @param[in] kem The OQS_KEM object representing the KEM.
  /// @param[out] ciphertext The ciphertext (encapsulation) represented as a byte string.
  /// @param[out] shared_secret The shared secret represented as a byte string.
  /// @param[in] public_key The public key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_KEM_encaps(
    ffi.Pointer<OQS_KEM> kem,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_encaps(
      kem,
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_KEM>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_encaps');
  late final _OQS_KEM_encaps = _OQS_KEM_encapsPtr.asFunction<
      int Function(ffi.Pointer<OQS_KEM>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Decapsulation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `shared_secret`, based
  /// on the `length_*` members in this object or the per-scheme compile-time macros
  /// `OQS_KEM_*_length_*`.
  ///
  /// @param[in] kem The OQS_KEM object representing the KEM.
  /// @param[out] shared_secret The shared secret represented as a byte string.
  /// @param[in] ciphertext The ciphertext (encapsulation) represented as a byte string.
  /// @param[in] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_KEM_decaps(
    ffi.Pointer<OQS_KEM> kem,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_decaps(
      kem,
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_KEM>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_decaps');
  late final _OQS_KEM_decaps = _OQS_KEM_decapsPtr.asFunction<
      int Function(ffi.Pointer<OQS_KEM>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Frees an OQS_KEM object that was constructed by OQS_KEM_new.
  ///
  /// @param[in] kem The OQS_KEM object to free.
  void OQS_KEM_free(
    ffi.Pointer<OQS_KEM> kem,
  ) {
    return _OQS_KEM_free(
      kem,
    );
  }

  late final _OQS_KEM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OQS_KEM>)>>(
          'OQS_KEM_free');
  late final _OQS_KEM_free =
      _OQS_KEM_freePtr.asFunction<void Function(ffi.Pointer<OQS_KEM>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_348864_new() {
    return _OQS_KEM_classic_mceliece_348864_new();
  }

  late final _OQS_KEM_classic_mceliece_348864_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_348864_new');
  late final _OQS_KEM_classic_mceliece_348864_new =
      _OQS_KEM_classic_mceliece_348864_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864_keypair');
  late final _OQS_KEM_classic_mceliece_348864_keypair =
      _OQS_KEM_classic_mceliece_348864_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864_keypair_derand');
  late final _OQS_KEM_classic_mceliece_348864_keypair_derand =
      _OQS_KEM_classic_mceliece_348864_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864_encaps');
  late final _OQS_KEM_classic_mceliece_348864_encaps =
      _OQS_KEM_classic_mceliece_348864_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864_decaps');
  late final _OQS_KEM_classic_mceliece_348864_decaps =
      _OQS_KEM_classic_mceliece_348864_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_348864f_new() {
    return _OQS_KEM_classic_mceliece_348864f_new();
  }

  late final _OQS_KEM_classic_mceliece_348864f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_348864f_new');
  late final _OQS_KEM_classic_mceliece_348864f_new =
      _OQS_KEM_classic_mceliece_348864f_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864f_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864f_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864f_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864f_keypair');
  late final _OQS_KEM_classic_mceliece_348864f_keypair =
      _OQS_KEM_classic_mceliece_348864f_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864f_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_348864f_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864f_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864f_keypair_derand');
  late final _OQS_KEM_classic_mceliece_348864f_keypair_derand =
      _OQS_KEM_classic_mceliece_348864f_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864f_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864f_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864f_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864f_encaps');
  late final _OQS_KEM_classic_mceliece_348864f_encaps =
      _OQS_KEM_classic_mceliece_348864f_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_348864f_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_348864f_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_348864f_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_348864f_decaps');
  late final _OQS_KEM_classic_mceliece_348864f_decaps =
      _OQS_KEM_classic_mceliece_348864f_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_460896_new() {
    return _OQS_KEM_classic_mceliece_460896_new();
  }

  late final _OQS_KEM_classic_mceliece_460896_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_460896_new');
  late final _OQS_KEM_classic_mceliece_460896_new =
      _OQS_KEM_classic_mceliece_460896_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896_keypair');
  late final _OQS_KEM_classic_mceliece_460896_keypair =
      _OQS_KEM_classic_mceliece_460896_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896_keypair_derand');
  late final _OQS_KEM_classic_mceliece_460896_keypair_derand =
      _OQS_KEM_classic_mceliece_460896_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896_encaps');
  late final _OQS_KEM_classic_mceliece_460896_encaps =
      _OQS_KEM_classic_mceliece_460896_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896_decaps');
  late final _OQS_KEM_classic_mceliece_460896_decaps =
      _OQS_KEM_classic_mceliece_460896_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_460896f_new() {
    return _OQS_KEM_classic_mceliece_460896f_new();
  }

  late final _OQS_KEM_classic_mceliece_460896f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_460896f_new');
  late final _OQS_KEM_classic_mceliece_460896f_new =
      _OQS_KEM_classic_mceliece_460896f_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896f_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896f_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896f_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896f_keypair');
  late final _OQS_KEM_classic_mceliece_460896f_keypair =
      _OQS_KEM_classic_mceliece_460896f_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896f_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_460896f_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896f_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896f_keypair_derand');
  late final _OQS_KEM_classic_mceliece_460896f_keypair_derand =
      _OQS_KEM_classic_mceliece_460896f_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896f_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896f_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896f_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896f_encaps');
  late final _OQS_KEM_classic_mceliece_460896f_encaps =
      _OQS_KEM_classic_mceliece_460896f_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_460896f_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_460896f_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_460896f_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_460896f_decaps');
  late final _OQS_KEM_classic_mceliece_460896f_decaps =
      _OQS_KEM_classic_mceliece_460896f_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_6688128_new() {
    return _OQS_KEM_classic_mceliece_6688128_new();
  }

  late final _OQS_KEM_classic_mceliece_6688128_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_6688128_new');
  late final _OQS_KEM_classic_mceliece_6688128_new =
      _OQS_KEM_classic_mceliece_6688128_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6688128_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128_keypair');
  late final _OQS_KEM_classic_mceliece_6688128_keypair =
      _OQS_KEM_classic_mceliece_6688128_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_6688128_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128_keypair_derand');
  late final _OQS_KEM_classic_mceliece_6688128_keypair_derand =
      _OQS_KEM_classic_mceliece_6688128_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6688128_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128_encaps');
  late final _OQS_KEM_classic_mceliece_6688128_encaps =
      _OQS_KEM_classic_mceliece_6688128_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6688128_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128_decaps');
  late final _OQS_KEM_classic_mceliece_6688128_decaps =
      _OQS_KEM_classic_mceliece_6688128_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_6688128f_new() {
    return _OQS_KEM_classic_mceliece_6688128f_new();
  }

  late final _OQS_KEM_classic_mceliece_6688128f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_6688128f_new');
  late final _OQS_KEM_classic_mceliece_6688128f_new =
      _OQS_KEM_classic_mceliece_6688128f_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128f_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6688128f_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128f_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128f_keypair');
  late final _OQS_KEM_classic_mceliece_6688128f_keypair =
      _OQS_KEM_classic_mceliece_6688128f_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128f_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_6688128f_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128f_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128f_keypair_derand');
  late final _OQS_KEM_classic_mceliece_6688128f_keypair_derand =
      _OQS_KEM_classic_mceliece_6688128f_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128f_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6688128f_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128f_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128f_encaps');
  late final _OQS_KEM_classic_mceliece_6688128f_encaps =
      _OQS_KEM_classic_mceliece_6688128f_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6688128f_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6688128f_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6688128f_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6688128f_decaps');
  late final _OQS_KEM_classic_mceliece_6688128f_decaps =
      _OQS_KEM_classic_mceliece_6688128f_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_6960119_new() {
    return _OQS_KEM_classic_mceliece_6960119_new();
  }

  late final _OQS_KEM_classic_mceliece_6960119_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_6960119_new');
  late final _OQS_KEM_classic_mceliece_6960119_new =
      _OQS_KEM_classic_mceliece_6960119_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6960119_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119_keypair');
  late final _OQS_KEM_classic_mceliece_6960119_keypair =
      _OQS_KEM_classic_mceliece_6960119_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_6960119_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119_keypair_derand');
  late final _OQS_KEM_classic_mceliece_6960119_keypair_derand =
      _OQS_KEM_classic_mceliece_6960119_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6960119_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119_encaps');
  late final _OQS_KEM_classic_mceliece_6960119_encaps =
      _OQS_KEM_classic_mceliece_6960119_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6960119_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119_decaps');
  late final _OQS_KEM_classic_mceliece_6960119_decaps =
      _OQS_KEM_classic_mceliece_6960119_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_6960119f_new() {
    return _OQS_KEM_classic_mceliece_6960119f_new();
  }

  late final _OQS_KEM_classic_mceliece_6960119f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_6960119f_new');
  late final _OQS_KEM_classic_mceliece_6960119f_new =
      _OQS_KEM_classic_mceliece_6960119f_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119f_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6960119f_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119f_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119f_keypair');
  late final _OQS_KEM_classic_mceliece_6960119f_keypair =
      _OQS_KEM_classic_mceliece_6960119f_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119f_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_6960119f_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119f_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119f_keypair_derand');
  late final _OQS_KEM_classic_mceliece_6960119f_keypair_derand =
      _OQS_KEM_classic_mceliece_6960119f_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119f_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6960119f_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119f_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119f_encaps');
  late final _OQS_KEM_classic_mceliece_6960119f_encaps =
      _OQS_KEM_classic_mceliece_6960119f_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_6960119f_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_6960119f_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_6960119f_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_6960119f_decaps');
  late final _OQS_KEM_classic_mceliece_6960119f_decaps =
      _OQS_KEM_classic_mceliece_6960119f_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_8192128_new() {
    return _OQS_KEM_classic_mceliece_8192128_new();
  }

  late final _OQS_KEM_classic_mceliece_8192128_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_8192128_new');
  late final _OQS_KEM_classic_mceliece_8192128_new =
      _OQS_KEM_classic_mceliece_8192128_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_8192128_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128_keypair');
  late final _OQS_KEM_classic_mceliece_8192128_keypair =
      _OQS_KEM_classic_mceliece_8192128_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_8192128_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128_keypair_derand');
  late final _OQS_KEM_classic_mceliece_8192128_keypair_derand =
      _OQS_KEM_classic_mceliece_8192128_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_8192128_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128_encaps');
  late final _OQS_KEM_classic_mceliece_8192128_encaps =
      _OQS_KEM_classic_mceliece_8192128_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_8192128_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128_decaps');
  late final _OQS_KEM_classic_mceliece_8192128_decaps =
      _OQS_KEM_classic_mceliece_8192128_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_classic_mceliece_8192128f_new() {
    return _OQS_KEM_classic_mceliece_8192128f_new();
  }

  late final _OQS_KEM_classic_mceliece_8192128f_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_classic_mceliece_8192128f_new');
  late final _OQS_KEM_classic_mceliece_8192128f_new =
      _OQS_KEM_classic_mceliece_8192128f_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128f_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_8192128f_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128f_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128f_keypair');
  late final _OQS_KEM_classic_mceliece_8192128f_keypair =
      _OQS_KEM_classic_mceliece_8192128f_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128f_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_KEM_classic_mceliece_8192128f_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128f_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128f_keypair_derand');
  late final _OQS_KEM_classic_mceliece_8192128f_keypair_derand =
      _OQS_KEM_classic_mceliece_8192128f_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128f_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_8192128f_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128f_encapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128f_encaps');
  late final _OQS_KEM_classic_mceliece_8192128f_encaps =
      _OQS_KEM_classic_mceliece_8192128f_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_classic_mceliece_8192128f_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_classic_mceliece_8192128f_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_classic_mceliece_8192128f_decapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_classic_mceliece_8192128f_decaps');
  late final _OQS_KEM_classic_mceliece_8192128f_decaps =
      _OQS_KEM_classic_mceliece_8192128f_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_kyber_512_new() {
    return _OQS_KEM_kyber_512_new();
  }

  late final _OQS_KEM_kyber_512_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_kyber_512_new');
  late final _OQS_KEM_kyber_512_new =
      _OQS_KEM_kyber_512_newPtr.asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_kyber_512_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_512_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_kyber_512_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_512_keypair');
  late final _OQS_KEM_kyber_512_keypair =
      _OQS_KEM_kyber_512_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_512_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_512_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_kyber_512_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_512_keypair_derand');
  late final _OQS_KEM_kyber_512_keypair_derand =
      _OQS_KEM_kyber_512_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_512_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_512_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_kyber_512_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_512_encaps');
  late final _OQS_KEM_kyber_512_encaps =
      _OQS_KEM_kyber_512_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_512_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_512_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_kyber_512_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_512_decaps');
  late final _OQS_KEM_kyber_512_decaps =
      _OQS_KEM_kyber_512_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_kyber_768_new() {
    return _OQS_KEM_kyber_768_new();
  }

  late final _OQS_KEM_kyber_768_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_kyber_768_new');
  late final _OQS_KEM_kyber_768_new =
      _OQS_KEM_kyber_768_newPtr.asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_kyber_768_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_768_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_kyber_768_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_768_keypair');
  late final _OQS_KEM_kyber_768_keypair =
      _OQS_KEM_kyber_768_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_768_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_768_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_kyber_768_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_768_keypair_derand');
  late final _OQS_KEM_kyber_768_keypair_derand =
      _OQS_KEM_kyber_768_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_768_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_768_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_kyber_768_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_768_encaps');
  late final _OQS_KEM_kyber_768_encaps =
      _OQS_KEM_kyber_768_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_768_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_768_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_kyber_768_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_768_decaps');
  late final _OQS_KEM_kyber_768_decaps =
      _OQS_KEM_kyber_768_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_kyber_1024_new() {
    return _OQS_KEM_kyber_1024_new();
  }

  late final _OQS_KEM_kyber_1024_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_kyber_1024_new');
  late final _OQS_KEM_kyber_1024_new =
      _OQS_KEM_kyber_1024_newPtr.asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_kyber_1024_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_1024_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_kyber_1024_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_1024_keypair');
  late final _OQS_KEM_kyber_1024_keypair =
      _OQS_KEM_kyber_1024_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_1024_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_1024_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_kyber_1024_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_1024_keypair_derand');
  late final _OQS_KEM_kyber_1024_keypair_derand =
      _OQS_KEM_kyber_1024_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_1024_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_1024_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_kyber_1024_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_1024_encaps');
  late final _OQS_KEM_kyber_1024_encaps =
      _OQS_KEM_kyber_1024_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_kyber_1024_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_kyber_1024_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_kyber_1024_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_kyber_1024_decaps');
  late final _OQS_KEM_kyber_1024_decaps =
      _OQS_KEM_kyber_1024_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_ml_kem_512_new() {
    return _OQS_KEM_ml_kem_512_new();
  }

  late final _OQS_KEM_ml_kem_512_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_ml_kem_512_new');
  late final _OQS_KEM_ml_kem_512_new =
      _OQS_KEM_ml_kem_512_newPtr.asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_ml_kem_512_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_512_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_ml_kem_512_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_512_keypair');
  late final _OQS_KEM_ml_kem_512_keypair =
      _OQS_KEM_ml_kem_512_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_512_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_512_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_ml_kem_512_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_512_keypair_derand');
  late final _OQS_KEM_ml_kem_512_keypair_derand =
      _OQS_KEM_ml_kem_512_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_512_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_512_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_ml_kem_512_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_512_encaps');
  late final _OQS_KEM_ml_kem_512_encaps =
      _OQS_KEM_ml_kem_512_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_512_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_512_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_ml_kem_512_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_512_decaps');
  late final _OQS_KEM_ml_kem_512_decaps =
      _OQS_KEM_ml_kem_512_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_ml_kem_768_new() {
    return _OQS_KEM_ml_kem_768_new();
  }

  late final _OQS_KEM_ml_kem_768_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_ml_kem_768_new');
  late final _OQS_KEM_ml_kem_768_new =
      _OQS_KEM_ml_kem_768_newPtr.asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_ml_kem_768_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_768_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_ml_kem_768_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_768_keypair');
  late final _OQS_KEM_ml_kem_768_keypair =
      _OQS_KEM_ml_kem_768_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_768_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_768_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_ml_kem_768_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_768_keypair_derand');
  late final _OQS_KEM_ml_kem_768_keypair_derand =
      _OQS_KEM_ml_kem_768_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_768_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_768_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_ml_kem_768_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_768_encaps');
  late final _OQS_KEM_ml_kem_768_encaps =
      _OQS_KEM_ml_kem_768_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_768_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_768_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_ml_kem_768_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_768_decaps');
  late final _OQS_KEM_ml_kem_768_decaps =
      _OQS_KEM_ml_kem_768_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_ml_kem_1024_new() {
    return _OQS_KEM_ml_kem_1024_new();
  }

  late final _OQS_KEM_ml_kem_1024_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_ml_kem_1024_new');
  late final _OQS_KEM_ml_kem_1024_new =
      _OQS_KEM_ml_kem_1024_newPtr.asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_ml_kem_1024_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_1024_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_ml_kem_1024_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_1024_keypair');
  late final _OQS_KEM_ml_kem_1024_keypair =
      _OQS_KEM_ml_kem_1024_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_1024_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_1024_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_ml_kem_1024_keypair_derandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_1024_keypair_derand');
  late final _OQS_KEM_ml_kem_1024_keypair_derand =
      _OQS_KEM_ml_kem_1024_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_1024_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_1024_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_ml_kem_1024_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_1024_encaps');
  late final _OQS_KEM_ml_kem_1024_encaps =
      _OQS_KEM_ml_kem_1024_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ml_kem_1024_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ml_kem_1024_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_ml_kem_1024_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ml_kem_1024_decaps');
  late final _OQS_KEM_ml_kem_1024_decaps =
      _OQS_KEM_ml_kem_1024_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_ntruprime_sntrup761_new() {
    return _OQS_KEM_ntruprime_sntrup761_new();
  }

  late final _OQS_KEM_ntruprime_sntrup761_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_ntruprime_sntrup761_new');
  late final _OQS_KEM_ntruprime_sntrup761_new =
      _OQS_KEM_ntruprime_sntrup761_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_ntruprime_sntrup761_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ntruprime_sntrup761_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_ntruprime_sntrup761_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ntruprime_sntrup761_keypair');
  late final _OQS_KEM_ntruprime_sntrup761_keypair =
      _OQS_KEM_ntruprime_sntrup761_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ntruprime_sntrup761_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ntruprime_sntrup761_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_ntruprime_sntrup761_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_ntruprime_sntrup761_keypair_derand');
  late final _OQS_KEM_ntruprime_sntrup761_keypair_derand =
      _OQS_KEM_ntruprime_sntrup761_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ntruprime_sntrup761_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ntruprime_sntrup761_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_ntruprime_sntrup761_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ntruprime_sntrup761_encaps');
  late final _OQS_KEM_ntruprime_sntrup761_encaps =
      _OQS_KEM_ntruprime_sntrup761_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_ntruprime_sntrup761_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_ntruprime_sntrup761_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_ntruprime_sntrup761_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_ntruprime_sntrup761_decaps');
  late final _OQS_KEM_ntruprime_sntrup761_decaps =
      _OQS_KEM_ntruprime_sntrup761_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_frodokem_640_aes_new() {
    return _OQS_KEM_frodokem_640_aes_new();
  }

  late final _OQS_KEM_frodokem_640_aes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_frodokem_640_aes_new');
  late final _OQS_KEM_frodokem_640_aes_new = _OQS_KEM_frodokem_640_aes_newPtr
      .asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_frodokem_640_aes_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_aes_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_640_aes_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_640_aes_keypair');
  late final _OQS_KEM_frodokem_640_aes_keypair =
      _OQS_KEM_frodokem_640_aes_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_640_aes_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_aes_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_frodokem_640_aes_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_frodokem_640_aes_keypair_derand');
  late final _OQS_KEM_frodokem_640_aes_keypair_derand =
      _OQS_KEM_frodokem_640_aes_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_640_aes_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_aes_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_frodokem_640_aes_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_640_aes_encaps');
  late final _OQS_KEM_frodokem_640_aes_encaps =
      _OQS_KEM_frodokem_640_aes_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_640_aes_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_aes_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_640_aes_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_640_aes_decaps');
  late final _OQS_KEM_frodokem_640_aes_decaps =
      _OQS_KEM_frodokem_640_aes_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_frodokem_640_shake_new() {
    return _OQS_KEM_frodokem_640_shake_new();
  }

  late final _OQS_KEM_frodokem_640_shake_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_frodokem_640_shake_new');
  late final _OQS_KEM_frodokem_640_shake_new =
      _OQS_KEM_frodokem_640_shake_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_frodokem_640_shake_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_shake_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_640_shake_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_640_shake_keypair');
  late final _OQS_KEM_frodokem_640_shake_keypair =
      _OQS_KEM_frodokem_640_shake_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_640_shake_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_shake_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_frodokem_640_shake_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_frodokem_640_shake_keypair_derand');
  late final _OQS_KEM_frodokem_640_shake_keypair_derand =
      _OQS_KEM_frodokem_640_shake_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_640_shake_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_shake_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_frodokem_640_shake_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_640_shake_encaps');
  late final _OQS_KEM_frodokem_640_shake_encaps =
      _OQS_KEM_frodokem_640_shake_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_640_shake_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_640_shake_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_640_shake_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_640_shake_decaps');
  late final _OQS_KEM_frodokem_640_shake_decaps =
      _OQS_KEM_frodokem_640_shake_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_frodokem_976_aes_new() {
    return _OQS_KEM_frodokem_976_aes_new();
  }

  late final _OQS_KEM_frodokem_976_aes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_frodokem_976_aes_new');
  late final _OQS_KEM_frodokem_976_aes_new = _OQS_KEM_frodokem_976_aes_newPtr
      .asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_frodokem_976_aes_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_aes_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_976_aes_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_976_aes_keypair');
  late final _OQS_KEM_frodokem_976_aes_keypair =
      _OQS_KEM_frodokem_976_aes_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_976_aes_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_aes_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_frodokem_976_aes_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_frodokem_976_aes_keypair_derand');
  late final _OQS_KEM_frodokem_976_aes_keypair_derand =
      _OQS_KEM_frodokem_976_aes_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_976_aes_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_aes_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_frodokem_976_aes_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_976_aes_encaps');
  late final _OQS_KEM_frodokem_976_aes_encaps =
      _OQS_KEM_frodokem_976_aes_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_976_aes_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_aes_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_976_aes_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_976_aes_decaps');
  late final _OQS_KEM_frodokem_976_aes_decaps =
      _OQS_KEM_frodokem_976_aes_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_frodokem_976_shake_new() {
    return _OQS_KEM_frodokem_976_shake_new();
  }

  late final _OQS_KEM_frodokem_976_shake_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_frodokem_976_shake_new');
  late final _OQS_KEM_frodokem_976_shake_new =
      _OQS_KEM_frodokem_976_shake_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_frodokem_976_shake_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_shake_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_976_shake_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_976_shake_keypair');
  late final _OQS_KEM_frodokem_976_shake_keypair =
      _OQS_KEM_frodokem_976_shake_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_976_shake_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_shake_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_frodokem_976_shake_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_frodokem_976_shake_keypair_derand');
  late final _OQS_KEM_frodokem_976_shake_keypair_derand =
      _OQS_KEM_frodokem_976_shake_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_976_shake_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_shake_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_frodokem_976_shake_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_976_shake_encaps');
  late final _OQS_KEM_frodokem_976_shake_encaps =
      _OQS_KEM_frodokem_976_shake_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_976_shake_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_976_shake_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_976_shake_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_976_shake_decaps');
  late final _OQS_KEM_frodokem_976_shake_decaps =
      _OQS_KEM_frodokem_976_shake_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_frodokem_1344_aes_new() {
    return _OQS_KEM_frodokem_1344_aes_new();
  }

  late final _OQS_KEM_frodokem_1344_aes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_frodokem_1344_aes_new');
  late final _OQS_KEM_frodokem_1344_aes_new = _OQS_KEM_frodokem_1344_aes_newPtr
      .asFunction<ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_frodokem_1344_aes_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_aes_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_1344_aes_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_1344_aes_keypair');
  late final _OQS_KEM_frodokem_1344_aes_keypair =
      _OQS_KEM_frodokem_1344_aes_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_1344_aes_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_aes_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_frodokem_1344_aes_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_frodokem_1344_aes_keypair_derand');
  late final _OQS_KEM_frodokem_1344_aes_keypair_derand =
      _OQS_KEM_frodokem_1344_aes_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_1344_aes_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_aes_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_frodokem_1344_aes_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_1344_aes_encaps');
  late final _OQS_KEM_frodokem_1344_aes_encaps =
      _OQS_KEM_frodokem_1344_aes_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_1344_aes_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_aes_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_1344_aes_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_1344_aes_decaps');
  late final _OQS_KEM_frodokem_1344_aes_decaps =
      _OQS_KEM_frodokem_1344_aes_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_KEM> OQS_KEM_frodokem_1344_shake_new() {
    return _OQS_KEM_frodokem_1344_shake_new();
  }

  late final _OQS_KEM_frodokem_1344_shake_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_KEM> Function()>>(
          'OQS_KEM_frodokem_1344_shake_new');
  late final _OQS_KEM_frodokem_1344_shake_new =
      _OQS_KEM_frodokem_1344_shake_newPtr.asFunction<
          ffi.Pointer<OQS_KEM> Function()>();

  OQS_STATUS OQS_KEM_frodokem_1344_shake_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_shake_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_1344_shake_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_1344_shake_keypair');
  late final _OQS_KEM_frodokem_1344_shake_keypair =
      _OQS_KEM_frodokem_1344_shake_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_1344_shake_keypair_derand(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_shake_keypair_derand(
      public_key,
      secret_key,
      seed,
    ));
  }

  late final _OQS_KEM_frodokem_1344_shake_keypair_derandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_KEM_frodokem_1344_shake_keypair_derand');
  late final _OQS_KEM_frodokem_1344_shake_keypair_derand =
      _OQS_KEM_frodokem_1344_shake_keypair_derandPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_1344_shake_encaps(
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_shake_encaps(
      ciphertext,
      shared_secret,
      public_key,
    ));
  }

  late final _OQS_KEM_frodokem_1344_shake_encapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_1344_shake_encaps');
  late final _OQS_KEM_frodokem_1344_shake_encaps =
      _OQS_KEM_frodokem_1344_shake_encapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_KEM_frodokem_1344_shake_decaps(
    ffi.Pointer<ffi.Uint8> shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_KEM_frodokem_1344_shake_decaps(
      shared_secret,
      ciphertext,
      secret_key,
    ));
  }

  late final _OQS_KEM_frodokem_1344_shake_decapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_KEM_frodokem_1344_shake_decaps');
  late final _OQS_KEM_frodokem_1344_shake_decaps =
      _OQS_KEM_frodokem_1344_shake_decapsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  /// Returns identifiers for available signature schemes in liboqs.  Used with OQS_SIG_new.
  ///
  /// Note that algorithm identifiers are present in this list even when the algorithm is disabled
  /// at compile time.
  ///
  /// @param[in] i Index of the algorithm identifier to return, 0 <= i < OQS_SIG_algs_length
  /// @return Algorithm identifier as a string, or NULL.
  ffi.Pointer<ffi.Char> OQS_SIG_alg_identifier(
    int i,
  ) {
    return _OQS_SIG_alg_identifier(
      i,
    );
  }

  late final _OQS_SIG_alg_identifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Size)>>(
          'OQS_SIG_alg_identifier');
  late final _OQS_SIG_alg_identifier = _OQS_SIG_alg_identifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  /// Returns the number of signature mechanisms in liboqs.  They can be enumerated with
  /// OQS_SIG_alg_identifier.
  ///
  /// Note that some mechanisms may be disabled at compile time.
  ///
  /// @return The number of signature mechanisms.
  int OQS_SIG_alg_count() {
    return _OQS_SIG_alg_count();
  }

  late final _OQS_SIG_alg_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OQS_SIG_alg_count');
  late final _OQS_SIG_alg_count =
      _OQS_SIG_alg_countPtr.asFunction<int Function()>();

  /// Indicates whether the specified algorithm was enabled at compile-time or not.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_SIG_algs`.
  /// @return 1 if enabled, 0 if disabled or not found
  int OQS_SIG_alg_is_enabled(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_SIG_alg_is_enabled(
      method_name,
    );
  }

  late final _OQS_SIG_alg_is_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OQS_SIG_alg_is_enabled');
  late final _OQS_SIG_alg_is_enabled = _OQS_SIG_alg_is_enabledPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// Constructs an OQS_SIG object for a particular algorithm.
  ///
  /// Callers should always check whether the return value is `NULL`, which indicates either than an
  /// invalid algorithm name was provided, or that the requested algorithm was disabled at compile-time.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_SIG_algs`.
  /// @return An OQS_SIG for the particular algorithm, or `NULL` if the algorithm has been disabled at compile-time.
  ffi.Pointer<OQS_SIG> OQS_SIG_new(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_SIG_new(
      method_name,
    );
  }

  late final _OQS_SIG_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OQS_SIG> Function(ffi.Pointer<ffi.Char>)>>('OQS_SIG_new');
  late final _OQS_SIG_new = _OQS_SIG_newPtr.asFunction<
      ffi.Pointer<OQS_SIG> Function(ffi.Pointer<ffi.Char>)>();

  /// Keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` and
  /// `secret_key`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_*_length_*`.
  ///
  /// @param[in] sig The OQS_SIG object representing the signature scheme.
  /// @param[out] public_key The public key represented as a byte string.
  /// @param[out] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_keypair(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_keypair(
      sig,
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_keypair');
  late final _OQS_SIG_keypair = _OQS_SIG_keypairPtr.asFunction<
      int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  /// Signature generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `signnature`,
  /// based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_*_length_*`.
  ///
  /// @param[in] sig The OQS_SIG object representing the signature scheme.
  /// @param[out] signature The signature on the message represented as a byte string.
  /// @param[out] signature_len The length of the signature.
  /// @param[in] message The message to sign represented as a byte string.
  /// @param[in] message_len The length of the message to sign.
  /// @param[in] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_sign(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sign(
      sig,
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_sign');
  late final _OQS_SIG_sign = _OQS_SIG_signPtr.asFunction<
      int Function(
          ffi.Pointer<OQS_SIG>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>)>();

  /// Signature generation algorithm, with custom context string.
  ///
  /// Caller is responsible for allocating sufficient memory for `signature`,
  /// based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_*_length_*`.
  ///
  /// @param[in] sig The OQS_SIG object representing the signature scheme.
  /// @param[out] signature The signature on the message represented as a byte string.
  /// @param[out] signature_len The actual length of the signature. May be smaller than `length_signature` for some algorithms since some algorithms have variable length signatures.
  /// @param[in] message The message to sign represented as a byte string.
  /// @param[in] message_len The length of the message to sign.
  /// @param[in] ctx_str The context string used for the signature. This value can be set to NULL if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] ctx_str_len The context string used for the signature. This value can be set to 0 if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_sign_with_ctx_str(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx_str,
    int ctx_str_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sign_with_ctx_str(
      sig,
      signature,
      signature_len,
      message,
      message_len,
      ctx_str,
      ctx_str_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_sign_with_ctx_str');
  late final _OQS_SIG_sign_with_ctx_str =
      _OQS_SIG_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  /// Signature verification algorithm.
  ///
  /// @param[in] sig The OQS_SIG object representing the signature scheme.
  /// @param[in] message The message represented as a byte string.
  /// @param[in] message_len The length of the message.
  /// @param[in] signature The signature on the message represented as a byte string.
  /// @param[in] signature_len The length of the signature.
  /// @param[in] public_key The public key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_verify(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_verify(
      sig,
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_verify');
  late final _OQS_SIG_verify = _OQS_SIG_verifyPtr.asFunction<
      int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  /// Signature verification algorithm, with custom context string.
  ///
  /// @param[in] sig The OQS_SIG object representing the signature scheme.
  /// @param[in] message The message represented as a byte string.
  /// @param[in] message_len The length of the message.
  /// @param[in] signature The signature on the message represented as a byte string.
  /// @param[in] signature_len The length of the signature.
  /// @param[in] ctx_str The context string used for the signature. This value can be set to NULL if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] ctx_str_len The context string used for the signature. This value can be set to 0 if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] public_key The public key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_verify_with_ctx_str(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx_str,
    int ctx_str_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_verify_with_ctx_str(
      sig,
      message,
      message_len,
      signature,
      signature_len,
      ctx_str,
      ctx_str_len,
      public_key,
    ));
  }

  late final _OQS_SIG_verify_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_verify_with_ctx_str');
  late final _OQS_SIG_verify_with_ctx_str =
      _OQS_SIG_verify_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  /// Frees an OQS_SIG object that was constructed by OQS_SIG_new.
  ///
  /// @param[in] sig The OQS_SIG object to free.
  void OQS_SIG_free(
    ffi.Pointer<OQS_SIG> sig,
  ) {
    return _OQS_SIG_free(
      sig,
    );
  }

  late final _OQS_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OQS_SIG>)>>(
          'OQS_SIG_free');
  late final _OQS_SIG_free =
      _OQS_SIG_freePtr.asFunction<void Function(ffi.Pointer<OQS_SIG>)>();

  /// Indicates whether the specified signature algorithm supports signing with a context string.
  ///
  /// @param[in] alg_name Name of the desired algorithm; one of the names in `OQS_SIG_algs`.
  /// @return true if the algorithm supports context string signing, false otherwise.
  bool OQS_SIG_supports_ctx_str(
    ffi.Pointer<ffi.Char> alg_name,
  ) {
    return _OQS_SIG_supports_ctx_str(
      alg_name,
    );
  }

  late final _OQS_SIG_supports_ctx_strPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'OQS_SIG_supports_ctx_str');
  late final _OQS_SIG_supports_ctx_str = _OQS_SIG_supports_ctx_strPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_dilithium_2_new() {
    return _OQS_SIG_dilithium_2_new();
  }

  late final _OQS_SIG_dilithium_2_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_dilithium_2_new');
  late final _OQS_SIG_dilithium_2_new =
      _OQS_SIG_dilithium_2_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_dilithium_2_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_2_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_2_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_2_keypair');
  late final _OQS_SIG_dilithium_2_keypair =
      _OQS_SIG_dilithium_2_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_2_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_2_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_2_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_2_sign');
  late final _OQS_SIG_dilithium_2_sign =
      _OQS_SIG_dilithium_2_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_2_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_2_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_dilithium_2_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_2_verify');
  late final _OQS_SIG_dilithium_2_verify =
      _OQS_SIG_dilithium_2_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_2_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_2_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_2_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_dilithium_2_sign_with_ctx_str');
  late final _OQS_SIG_dilithium_2_sign_with_ctx_str =
      _OQS_SIG_dilithium_2_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_2_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_2_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_dilithium_2_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_dilithium_2_verify_with_ctx_str');
  late final _OQS_SIG_dilithium_2_verify_with_ctx_str =
      _OQS_SIG_dilithium_2_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_dilithium_3_new() {
    return _OQS_SIG_dilithium_3_new();
  }

  late final _OQS_SIG_dilithium_3_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_dilithium_3_new');
  late final _OQS_SIG_dilithium_3_new =
      _OQS_SIG_dilithium_3_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_dilithium_3_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_3_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_3_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_3_keypair');
  late final _OQS_SIG_dilithium_3_keypair =
      _OQS_SIG_dilithium_3_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_3_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_3_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_3_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_3_sign');
  late final _OQS_SIG_dilithium_3_sign =
      _OQS_SIG_dilithium_3_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_3_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_3_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_dilithium_3_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_3_verify');
  late final _OQS_SIG_dilithium_3_verify =
      _OQS_SIG_dilithium_3_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_3_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_3_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_3_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_dilithium_3_sign_with_ctx_str');
  late final _OQS_SIG_dilithium_3_sign_with_ctx_str =
      _OQS_SIG_dilithium_3_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_3_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_3_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_dilithium_3_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_dilithium_3_verify_with_ctx_str');
  late final _OQS_SIG_dilithium_3_verify_with_ctx_str =
      _OQS_SIG_dilithium_3_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_dilithium_5_new() {
    return _OQS_SIG_dilithium_5_new();
  }

  late final _OQS_SIG_dilithium_5_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_dilithium_5_new');
  late final _OQS_SIG_dilithium_5_new =
      _OQS_SIG_dilithium_5_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_dilithium_5_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_5_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_5_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_5_keypair');
  late final _OQS_SIG_dilithium_5_keypair =
      _OQS_SIG_dilithium_5_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_5_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_5_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_5_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_5_sign');
  late final _OQS_SIG_dilithium_5_sign =
      _OQS_SIG_dilithium_5_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_5_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_5_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_dilithium_5_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_dilithium_5_verify');
  late final _OQS_SIG_dilithium_5_verify =
      _OQS_SIG_dilithium_5_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_5_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_5_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_dilithium_5_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_dilithium_5_sign_with_ctx_str');
  late final _OQS_SIG_dilithium_5_sign_with_ctx_str =
      _OQS_SIG_dilithium_5_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_dilithium_5_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_dilithium_5_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_dilithium_5_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_dilithium_5_verify_with_ctx_str');
  late final _OQS_SIG_dilithium_5_verify_with_ctx_str =
      _OQS_SIG_dilithium_5_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_ml_dsa_44_new() {
    return _OQS_SIG_ml_dsa_44_new();
  }

  late final _OQS_SIG_ml_dsa_44_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_ml_dsa_44_new');
  late final _OQS_SIG_ml_dsa_44_new =
      _OQS_SIG_ml_dsa_44_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_ml_dsa_44_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_44_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_44_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_44_keypair');
  late final _OQS_SIG_ml_dsa_44_keypair =
      _OQS_SIG_ml_dsa_44_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_44_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_44_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_44_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_44_sign');
  late final _OQS_SIG_ml_dsa_44_sign = _OQS_SIG_ml_dsa_44_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_44_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_44_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_44_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_44_verify');
  late final _OQS_SIG_ml_dsa_44_verify =
      _OQS_SIG_ml_dsa_44_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_44_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_44_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_44_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_44_sign_with_ctx_str');
  late final _OQS_SIG_ml_dsa_44_sign_with_ctx_str =
      _OQS_SIG_ml_dsa_44_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_44_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_44_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_44_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_ml_dsa_44_verify_with_ctx_str');
  late final _OQS_SIG_ml_dsa_44_verify_with_ctx_str =
      _OQS_SIG_ml_dsa_44_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_ml_dsa_65_new() {
    return _OQS_SIG_ml_dsa_65_new();
  }

  late final _OQS_SIG_ml_dsa_65_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_ml_dsa_65_new');
  late final _OQS_SIG_ml_dsa_65_new =
      _OQS_SIG_ml_dsa_65_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_ml_dsa_65_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_65_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_65_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_65_keypair');
  late final _OQS_SIG_ml_dsa_65_keypair =
      _OQS_SIG_ml_dsa_65_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_65_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_65_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_65_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_65_sign');
  late final _OQS_SIG_ml_dsa_65_sign = _OQS_SIG_ml_dsa_65_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_65_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_65_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_65_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_65_verify');
  late final _OQS_SIG_ml_dsa_65_verify =
      _OQS_SIG_ml_dsa_65_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_65_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_65_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_65_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_65_sign_with_ctx_str');
  late final _OQS_SIG_ml_dsa_65_sign_with_ctx_str =
      _OQS_SIG_ml_dsa_65_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_65_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_65_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_65_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_ml_dsa_65_verify_with_ctx_str');
  late final _OQS_SIG_ml_dsa_65_verify_with_ctx_str =
      _OQS_SIG_ml_dsa_65_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_ml_dsa_87_new() {
    return _OQS_SIG_ml_dsa_87_new();
  }

  late final _OQS_SIG_ml_dsa_87_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_ml_dsa_87_new');
  late final _OQS_SIG_ml_dsa_87_new =
      _OQS_SIG_ml_dsa_87_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_ml_dsa_87_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_87_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_87_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_87_keypair');
  late final _OQS_SIG_ml_dsa_87_keypair =
      _OQS_SIG_ml_dsa_87_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_87_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_87_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_87_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_87_sign');
  late final _OQS_SIG_ml_dsa_87_sign = _OQS_SIG_ml_dsa_87_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_87_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_87_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_87_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_87_verify');
  late final _OQS_SIG_ml_dsa_87_verify =
      _OQS_SIG_ml_dsa_87_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_87_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_87_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_87_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_ml_dsa_87_sign_with_ctx_str');
  late final _OQS_SIG_ml_dsa_87_sign_with_ctx_str =
      _OQS_SIG_ml_dsa_87_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_ml_dsa_87_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_ml_dsa_87_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_ml_dsa_87_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_ml_dsa_87_verify_with_ctx_str');
  late final _OQS_SIG_ml_dsa_87_verify_with_ctx_str =
      _OQS_SIG_ml_dsa_87_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_falcon_512_new() {
    return _OQS_SIG_falcon_512_new();
  }

  late final _OQS_SIG_falcon_512_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_falcon_512_new');
  late final _OQS_SIG_falcon_512_new =
      _OQS_SIG_falcon_512_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_falcon_512_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_512_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_512_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_512_keypair');
  late final _OQS_SIG_falcon_512_keypair =
      _OQS_SIG_falcon_512_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_512_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_512_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_512_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_512_sign');
  late final _OQS_SIG_falcon_512_sign = _OQS_SIG_falcon_512_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_512_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_512_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_512_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_512_verify');
  late final _OQS_SIG_falcon_512_verify =
      _OQS_SIG_falcon_512_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_512_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_512_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_512_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_512_sign_with_ctx_str');
  late final _OQS_SIG_falcon_512_sign_with_ctx_str =
      _OQS_SIG_falcon_512_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_512_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_512_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_512_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_512_verify_with_ctx_str');
  late final _OQS_SIG_falcon_512_verify_with_ctx_str =
      _OQS_SIG_falcon_512_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_falcon_1024_new() {
    return _OQS_SIG_falcon_1024_new();
  }

  late final _OQS_SIG_falcon_1024_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_falcon_1024_new');
  late final _OQS_SIG_falcon_1024_new =
      _OQS_SIG_falcon_1024_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_falcon_1024_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_1024_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_1024_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_1024_keypair');
  late final _OQS_SIG_falcon_1024_keypair =
      _OQS_SIG_falcon_1024_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_1024_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_1024_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_1024_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_1024_sign');
  late final _OQS_SIG_falcon_1024_sign =
      _OQS_SIG_falcon_1024_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_1024_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_1024_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_1024_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_1024_verify');
  late final _OQS_SIG_falcon_1024_verify =
      _OQS_SIG_falcon_1024_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_1024_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_1024_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_1024_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_1024_sign_with_ctx_str');
  late final _OQS_SIG_falcon_1024_sign_with_ctx_str =
      _OQS_SIG_falcon_1024_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_1024_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_1024_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_1024_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_1024_verify_with_ctx_str');
  late final _OQS_SIG_falcon_1024_verify_with_ctx_str =
      _OQS_SIG_falcon_1024_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_falcon_padded_512_new() {
    return _OQS_SIG_falcon_padded_512_new();
  }

  late final _OQS_SIG_falcon_padded_512_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_falcon_padded_512_new');
  late final _OQS_SIG_falcon_padded_512_new = _OQS_SIG_falcon_padded_512_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_falcon_padded_512_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_512_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_512_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_padded_512_keypair');
  late final _OQS_SIG_falcon_padded_512_keypair =
      _OQS_SIG_falcon_padded_512_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_512_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_512_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_512_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_padded_512_sign');
  late final _OQS_SIG_falcon_padded_512_sign =
      _OQS_SIG_falcon_padded_512_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_512_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_512_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_512_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_padded_512_verify');
  late final _OQS_SIG_falcon_padded_512_verify =
      _OQS_SIG_falcon_padded_512_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_512_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_512_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_512_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_padded_512_sign_with_ctx_str');
  late final _OQS_SIG_falcon_padded_512_sign_with_ctx_str =
      _OQS_SIG_falcon_padded_512_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_512_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_512_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_512_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_padded_512_verify_with_ctx_str');
  late final _OQS_SIG_falcon_padded_512_verify_with_ctx_str =
      _OQS_SIG_falcon_padded_512_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_falcon_padded_1024_new() {
    return _OQS_SIG_falcon_padded_1024_new();
  }

  late final _OQS_SIG_falcon_padded_1024_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_falcon_padded_1024_new');
  late final _OQS_SIG_falcon_padded_1024_new =
      _OQS_SIG_falcon_padded_1024_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_falcon_padded_1024_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_1024_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_1024_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_padded_1024_keypair');
  late final _OQS_SIG_falcon_padded_1024_keypair =
      _OQS_SIG_falcon_padded_1024_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_1024_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_1024_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_1024_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_padded_1024_sign');
  late final _OQS_SIG_falcon_padded_1024_sign =
      _OQS_SIG_falcon_padded_1024_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_1024_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_1024_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_1024_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_falcon_padded_1024_verify');
  late final _OQS_SIG_falcon_padded_1024_verify =
      _OQS_SIG_falcon_padded_1024_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_1024_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_1024_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_1024_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_padded_1024_sign_with_ctx_str');
  late final _OQS_SIG_falcon_padded_1024_sign_with_ctx_str =
      _OQS_SIG_falcon_padded_1024_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_falcon_padded_1024_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_falcon_padded_1024_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_falcon_padded_1024_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_falcon_padded_1024_verify_with_ctx_str');
  late final _OQS_SIG_falcon_padded_1024_verify_with_ctx_str =
      _OQS_SIG_falcon_padded_1024_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_sha2_128f_simple_new() {
    return _OQS_SIG_sphincs_sha2_128f_simple_new();
  }

  late final _OQS_SIG_sphincs_sha2_128f_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_sha2_128f_simple_new');
  late final _OQS_SIG_sphincs_sha2_128f_simple_new =
      _OQS_SIG_sphincs_sha2_128f_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128f_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_128f_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128f_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128f_simple_keypair');
  late final _OQS_SIG_sphincs_sha2_128f_simple_keypair =
      _OQS_SIG_sphincs_sha2_128f_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128f_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_128f_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128f_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128f_simple_sign');
  late final _OQS_SIG_sphincs_sha2_128f_simple_sign =
      _OQS_SIG_sphincs_sha2_128f_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128f_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_128f_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128f_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128f_simple_verify');
  late final _OQS_SIG_sphincs_sha2_128f_simple_verify =
      _OQS_SIG_sphincs_sha2_128f_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_sha2_128s_simple_new() {
    return _OQS_SIG_sphincs_sha2_128s_simple_new();
  }

  late final _OQS_SIG_sphincs_sha2_128s_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_sha2_128s_simple_new');
  late final _OQS_SIG_sphincs_sha2_128s_simple_new =
      _OQS_SIG_sphincs_sha2_128s_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128s_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_128s_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128s_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128s_simple_keypair');
  late final _OQS_SIG_sphincs_sha2_128s_simple_keypair =
      _OQS_SIG_sphincs_sha2_128s_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128s_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_128s_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128s_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128s_simple_sign');
  late final _OQS_SIG_sphincs_sha2_128s_simple_sign =
      _OQS_SIG_sphincs_sha2_128s_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128s_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_128s_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128s_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128s_simple_verify');
  late final _OQS_SIG_sphincs_sha2_128s_simple_verify =
      _OQS_SIG_sphincs_sha2_128s_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_sha2_192f_simple_new() {
    return _OQS_SIG_sphincs_sha2_192f_simple_new();
  }

  late final _OQS_SIG_sphincs_sha2_192f_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_sha2_192f_simple_new');
  late final _OQS_SIG_sphincs_sha2_192f_simple_new =
      _OQS_SIG_sphincs_sha2_192f_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192f_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_192f_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192f_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192f_simple_keypair');
  late final _OQS_SIG_sphincs_sha2_192f_simple_keypair =
      _OQS_SIG_sphincs_sha2_192f_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192f_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_192f_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192f_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192f_simple_sign');
  late final _OQS_SIG_sphincs_sha2_192f_simple_sign =
      _OQS_SIG_sphincs_sha2_192f_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192f_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_192f_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192f_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192f_simple_verify');
  late final _OQS_SIG_sphincs_sha2_192f_simple_verify =
      _OQS_SIG_sphincs_sha2_192f_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_sha2_192s_simple_new() {
    return _OQS_SIG_sphincs_sha2_192s_simple_new();
  }

  late final _OQS_SIG_sphincs_sha2_192s_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_sha2_192s_simple_new');
  late final _OQS_SIG_sphincs_sha2_192s_simple_new =
      _OQS_SIG_sphincs_sha2_192s_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192s_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_192s_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192s_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192s_simple_keypair');
  late final _OQS_SIG_sphincs_sha2_192s_simple_keypair =
      _OQS_SIG_sphincs_sha2_192s_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192s_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_192s_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192s_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192s_simple_sign');
  late final _OQS_SIG_sphincs_sha2_192s_simple_sign =
      _OQS_SIG_sphincs_sha2_192s_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192s_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_192s_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192s_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192s_simple_verify');
  late final _OQS_SIG_sphincs_sha2_192s_simple_verify =
      _OQS_SIG_sphincs_sha2_192s_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_sha2_256f_simple_new() {
    return _OQS_SIG_sphincs_sha2_256f_simple_new();
  }

  late final _OQS_SIG_sphincs_sha2_256f_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_sha2_256f_simple_new');
  late final _OQS_SIG_sphincs_sha2_256f_simple_new =
      _OQS_SIG_sphincs_sha2_256f_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256f_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_256f_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256f_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256f_simple_keypair');
  late final _OQS_SIG_sphincs_sha2_256f_simple_keypair =
      _OQS_SIG_sphincs_sha2_256f_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256f_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_256f_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256f_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256f_simple_sign');
  late final _OQS_SIG_sphincs_sha2_256f_simple_sign =
      _OQS_SIG_sphincs_sha2_256f_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256f_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_256f_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256f_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256f_simple_verify');
  late final _OQS_SIG_sphincs_sha2_256f_simple_verify =
      _OQS_SIG_sphincs_sha2_256f_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_sha2_256s_simple_new() {
    return _OQS_SIG_sphincs_sha2_256s_simple_new();
  }

  late final _OQS_SIG_sphincs_sha2_256s_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_sha2_256s_simple_new');
  late final _OQS_SIG_sphincs_sha2_256s_simple_new =
      _OQS_SIG_sphincs_sha2_256s_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256s_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_256s_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256s_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256s_simple_keypair');
  late final _OQS_SIG_sphincs_sha2_256s_simple_keypair =
      _OQS_SIG_sphincs_sha2_256s_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256s_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_256s_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256s_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256s_simple_sign');
  late final _OQS_SIG_sphincs_sha2_256s_simple_sign =
      _OQS_SIG_sphincs_sha2_256s_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256s_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_sha2_256s_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256s_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256s_simple_verify');
  late final _OQS_SIG_sphincs_sha2_256s_simple_verify =
      _OQS_SIG_sphincs_sha2_256s_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_shake_128f_simple_new() {
    return _OQS_SIG_sphincs_shake_128f_simple_new();
  }

  late final _OQS_SIG_sphincs_shake_128f_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_shake_128f_simple_new');
  late final _OQS_SIG_sphincs_shake_128f_simple_new =
      _OQS_SIG_sphincs_shake_128f_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_shake_128f_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_128f_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128f_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128f_simple_keypair');
  late final _OQS_SIG_sphincs_shake_128f_simple_keypair =
      _OQS_SIG_sphincs_shake_128f_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128f_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_128f_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128f_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128f_simple_sign');
  late final _OQS_SIG_sphincs_shake_128f_simple_sign =
      _OQS_SIG_sphincs_shake_128f_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128f_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_128f_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128f_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128f_simple_verify');
  late final _OQS_SIG_sphincs_shake_128f_simple_verify =
      _OQS_SIG_sphincs_shake_128f_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_shake_128s_simple_new() {
    return _OQS_SIG_sphincs_shake_128s_simple_new();
  }

  late final _OQS_SIG_sphincs_shake_128s_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_shake_128s_simple_new');
  late final _OQS_SIG_sphincs_shake_128s_simple_new =
      _OQS_SIG_sphincs_shake_128s_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_shake_128s_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_128s_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128s_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128s_simple_keypair');
  late final _OQS_SIG_sphincs_shake_128s_simple_keypair =
      _OQS_SIG_sphincs_shake_128s_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128s_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_128s_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128s_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128s_simple_sign');
  late final _OQS_SIG_sphincs_shake_128s_simple_sign =
      _OQS_SIG_sphincs_shake_128s_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128s_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_128s_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128s_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128s_simple_verify');
  late final _OQS_SIG_sphincs_shake_128s_simple_verify =
      _OQS_SIG_sphincs_shake_128s_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_shake_192f_simple_new() {
    return _OQS_SIG_sphincs_shake_192f_simple_new();
  }

  late final _OQS_SIG_sphincs_shake_192f_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_shake_192f_simple_new');
  late final _OQS_SIG_sphincs_shake_192f_simple_new =
      _OQS_SIG_sphincs_shake_192f_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_shake_192f_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_192f_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192f_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192f_simple_keypair');
  late final _OQS_SIG_sphincs_shake_192f_simple_keypair =
      _OQS_SIG_sphincs_shake_192f_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192f_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_192f_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192f_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192f_simple_sign');
  late final _OQS_SIG_sphincs_shake_192f_simple_sign =
      _OQS_SIG_sphincs_shake_192f_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192f_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_192f_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192f_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192f_simple_verify');
  late final _OQS_SIG_sphincs_shake_192f_simple_verify =
      _OQS_SIG_sphincs_shake_192f_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_shake_192s_simple_new() {
    return _OQS_SIG_sphincs_shake_192s_simple_new();
  }

  late final _OQS_SIG_sphincs_shake_192s_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_shake_192s_simple_new');
  late final _OQS_SIG_sphincs_shake_192s_simple_new =
      _OQS_SIG_sphincs_shake_192s_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_shake_192s_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_192s_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192s_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192s_simple_keypair');
  late final _OQS_SIG_sphincs_shake_192s_simple_keypair =
      _OQS_SIG_sphincs_shake_192s_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192s_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_192s_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192s_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192s_simple_sign');
  late final _OQS_SIG_sphincs_shake_192s_simple_sign =
      _OQS_SIG_sphincs_shake_192s_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192s_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_192s_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192s_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192s_simple_verify');
  late final _OQS_SIG_sphincs_shake_192s_simple_verify =
      _OQS_SIG_sphincs_shake_192s_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_shake_256f_simple_new() {
    return _OQS_SIG_sphincs_shake_256f_simple_new();
  }

  late final _OQS_SIG_sphincs_shake_256f_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_shake_256f_simple_new');
  late final _OQS_SIG_sphincs_shake_256f_simple_new =
      _OQS_SIG_sphincs_shake_256f_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_shake_256f_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_256f_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256f_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256f_simple_keypair');
  late final _OQS_SIG_sphincs_shake_256f_simple_keypair =
      _OQS_SIG_sphincs_shake_256f_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256f_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_256f_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256f_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256f_simple_sign');
  late final _OQS_SIG_sphincs_shake_256f_simple_sign =
      _OQS_SIG_sphincs_shake_256f_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256f_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_256f_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256f_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256f_simple_verify');
  late final _OQS_SIG_sphincs_shake_256f_simple_verify =
      _OQS_SIG_sphincs_shake_256f_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_sphincs_shake_256s_simple_new() {
    return _OQS_SIG_sphincs_shake_256s_simple_new();
  }

  late final _OQS_SIG_sphincs_shake_256s_simple_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_sphincs_shake_256s_simple_new');
  late final _OQS_SIG_sphincs_shake_256s_simple_new =
      _OQS_SIG_sphincs_shake_256s_simple_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_sphincs_shake_256s_simple_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_256s_simple_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256s_simple_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256s_simple_keypair');
  late final _OQS_SIG_sphincs_shake_256s_simple_keypair =
      _OQS_SIG_sphincs_shake_256s_simple_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256s_simple_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_256s_simple_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256s_simple_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256s_simple_sign');
  late final _OQS_SIG_sphincs_shake_256s_simple_sign =
      _OQS_SIG_sphincs_shake_256s_simple_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256s_simple_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_sphincs_shake_256s_simple_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256s_simple_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256s_simple_verify');
  late final _OQS_SIG_sphincs_shake_256s_simple_verify =
      _OQS_SIG_sphincs_shake_256s_simple_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_str =
      _OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_str');
  late final _OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_str =
      _OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_mayo_1_new() {
    return _OQS_SIG_mayo_1_new();
  }

  late final _OQS_SIG_mayo_1_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_mayo_1_new');
  late final _OQS_SIG_mayo_1_new =
      _OQS_SIG_mayo_1_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_mayo_1_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_1_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_1_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_1_keypair');
  late final _OQS_SIG_mayo_1_keypair = _OQS_SIG_mayo_1_keypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_1_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_1_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_1_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_1_sign');
  late final _OQS_SIG_mayo_1_sign = _OQS_SIG_mayo_1_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_1_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_1_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_1_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_1_verify');
  late final _OQS_SIG_mayo_1_verify = _OQS_SIG_mayo_1_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_1_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_1_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_1_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_1_sign_with_ctx_str');
  late final _OQS_SIG_mayo_1_sign_with_ctx_str =
      _OQS_SIG_mayo_1_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_1_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_1_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_1_verify_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_1_verify_with_ctx_str');
  late final _OQS_SIG_mayo_1_verify_with_ctx_str =
      _OQS_SIG_mayo_1_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_mayo_2_new() {
    return _OQS_SIG_mayo_2_new();
  }

  late final _OQS_SIG_mayo_2_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_mayo_2_new');
  late final _OQS_SIG_mayo_2_new =
      _OQS_SIG_mayo_2_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_mayo_2_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_2_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_2_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_2_keypair');
  late final _OQS_SIG_mayo_2_keypair = _OQS_SIG_mayo_2_keypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_2_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_2_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_2_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_2_sign');
  late final _OQS_SIG_mayo_2_sign = _OQS_SIG_mayo_2_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_2_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_2_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_2_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_2_verify');
  late final _OQS_SIG_mayo_2_verify = _OQS_SIG_mayo_2_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_2_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_2_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_2_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_2_sign_with_ctx_str');
  late final _OQS_SIG_mayo_2_sign_with_ctx_str =
      _OQS_SIG_mayo_2_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_2_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_2_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_2_verify_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_2_verify_with_ctx_str');
  late final _OQS_SIG_mayo_2_verify_with_ctx_str =
      _OQS_SIG_mayo_2_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_mayo_3_new() {
    return _OQS_SIG_mayo_3_new();
  }

  late final _OQS_SIG_mayo_3_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_mayo_3_new');
  late final _OQS_SIG_mayo_3_new =
      _OQS_SIG_mayo_3_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_mayo_3_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_3_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_3_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_3_keypair');
  late final _OQS_SIG_mayo_3_keypair = _OQS_SIG_mayo_3_keypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_3_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_3_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_3_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_3_sign');
  late final _OQS_SIG_mayo_3_sign = _OQS_SIG_mayo_3_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_3_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_3_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_3_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_3_verify');
  late final _OQS_SIG_mayo_3_verify = _OQS_SIG_mayo_3_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_3_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_3_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_3_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_3_sign_with_ctx_str');
  late final _OQS_SIG_mayo_3_sign_with_ctx_str =
      _OQS_SIG_mayo_3_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_3_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_3_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_3_verify_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_3_verify_with_ctx_str');
  late final _OQS_SIG_mayo_3_verify_with_ctx_str =
      _OQS_SIG_mayo_3_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_mayo_5_new() {
    return _OQS_SIG_mayo_5_new();
  }

  late final _OQS_SIG_mayo_5_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_mayo_5_new');
  late final _OQS_SIG_mayo_5_new =
      _OQS_SIG_mayo_5_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_mayo_5_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_5_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_5_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_5_keypair');
  late final _OQS_SIG_mayo_5_keypair = _OQS_SIG_mayo_5_keypairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_5_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_5_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_5_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_5_sign');
  late final _OQS_SIG_mayo_5_sign = _OQS_SIG_mayo_5_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_5_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_5_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_5_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_5_verify');
  late final _OQS_SIG_mayo_5_verify = _OQS_SIG_mayo_5_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_5_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_5_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_mayo_5_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_5_sign_with_ctx_str');
  late final _OQS_SIG_mayo_5_sign_with_ctx_str =
      _OQS_SIG_mayo_5_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_mayo_5_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_mayo_5_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_mayo_5_verify_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_mayo_5_verify_with_ctx_str');
  late final _OQS_SIG_mayo_5_verify_with_ctx_str =
      _OQS_SIG_mayo_5_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_128_balanced_new() {
    return _OQS_SIG_cross_rsdp_128_balanced_new();
  }

  late final _OQS_SIG_cross_rsdp_128_balanced_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_128_balanced_new');
  late final _OQS_SIG_cross_rsdp_128_balanced_new =
      _OQS_SIG_cross_rsdp_128_balanced_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_balanced_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_balanced_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_balanced_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_balanced_keypair');
  late final _OQS_SIG_cross_rsdp_128_balanced_keypair =
      _OQS_SIG_cross_rsdp_128_balanced_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_balanced_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_balanced_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_balanced_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_balanced_sign');
  late final _OQS_SIG_cross_rsdp_128_balanced_sign =
      _OQS_SIG_cross_rsdp_128_balanced_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_balanced_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_balanced_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_balanced_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_balanced_verify');
  late final _OQS_SIG_cross_rsdp_128_balanced_verify =
      _OQS_SIG_cross_rsdp_128_balanced_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_128_fast_new() {
    return _OQS_SIG_cross_rsdp_128_fast_new();
  }

  late final _OQS_SIG_cross_rsdp_128_fast_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_128_fast_new');
  late final _OQS_SIG_cross_rsdp_128_fast_new =
      _OQS_SIG_cross_rsdp_128_fast_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_fast_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_fast_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_fast_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_fast_keypair');
  late final _OQS_SIG_cross_rsdp_128_fast_keypair =
      _OQS_SIG_cross_rsdp_128_fast_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_fast_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_fast_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_fast_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_fast_sign');
  late final _OQS_SIG_cross_rsdp_128_fast_sign =
      _OQS_SIG_cross_rsdp_128_fast_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_fast_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_fast_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_fast_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_fast_verify');
  late final _OQS_SIG_cross_rsdp_128_fast_verify =
      _OQS_SIG_cross_rsdp_128_fast_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_128_small_new() {
    return _OQS_SIG_cross_rsdp_128_small_new();
  }

  late final _OQS_SIG_cross_rsdp_128_small_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_128_small_new');
  late final _OQS_SIG_cross_rsdp_128_small_new =
      _OQS_SIG_cross_rsdp_128_small_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_small_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_small_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_small_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_small_keypair');
  late final _OQS_SIG_cross_rsdp_128_small_keypair =
      _OQS_SIG_cross_rsdp_128_small_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_small_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_small_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_small_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_small_sign');
  late final _OQS_SIG_cross_rsdp_128_small_sign =
      _OQS_SIG_cross_rsdp_128_small_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_small_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_small_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_small_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_128_small_verify');
  late final _OQS_SIG_cross_rsdp_128_small_verify =
      _OQS_SIG_cross_rsdp_128_small_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_small_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_128_small_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_small_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_small_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_128_small_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_128_small_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_128_small_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_128_small_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_128_small_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_128_small_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_128_small_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_128_small_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_192_balanced_new() {
    return _OQS_SIG_cross_rsdp_192_balanced_new();
  }

  late final _OQS_SIG_cross_rsdp_192_balanced_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_192_balanced_new');
  late final _OQS_SIG_cross_rsdp_192_balanced_new =
      _OQS_SIG_cross_rsdp_192_balanced_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_balanced_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_balanced_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_balanced_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_balanced_keypair');
  late final _OQS_SIG_cross_rsdp_192_balanced_keypair =
      _OQS_SIG_cross_rsdp_192_balanced_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_balanced_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_balanced_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_balanced_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_balanced_sign');
  late final _OQS_SIG_cross_rsdp_192_balanced_sign =
      _OQS_SIG_cross_rsdp_192_balanced_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_balanced_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_balanced_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_balanced_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_balanced_verify');
  late final _OQS_SIG_cross_rsdp_192_balanced_verify =
      _OQS_SIG_cross_rsdp_192_balanced_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_192_fast_new() {
    return _OQS_SIG_cross_rsdp_192_fast_new();
  }

  late final _OQS_SIG_cross_rsdp_192_fast_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_192_fast_new');
  late final _OQS_SIG_cross_rsdp_192_fast_new =
      _OQS_SIG_cross_rsdp_192_fast_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_fast_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_fast_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_fast_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_fast_keypair');
  late final _OQS_SIG_cross_rsdp_192_fast_keypair =
      _OQS_SIG_cross_rsdp_192_fast_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_fast_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_fast_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_fast_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_fast_sign');
  late final _OQS_SIG_cross_rsdp_192_fast_sign =
      _OQS_SIG_cross_rsdp_192_fast_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_fast_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_fast_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_fast_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_fast_verify');
  late final _OQS_SIG_cross_rsdp_192_fast_verify =
      _OQS_SIG_cross_rsdp_192_fast_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_192_small_new() {
    return _OQS_SIG_cross_rsdp_192_small_new();
  }

  late final _OQS_SIG_cross_rsdp_192_small_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_192_small_new');
  late final _OQS_SIG_cross_rsdp_192_small_new =
      _OQS_SIG_cross_rsdp_192_small_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_small_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_small_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_small_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_small_keypair');
  late final _OQS_SIG_cross_rsdp_192_small_keypair =
      _OQS_SIG_cross_rsdp_192_small_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_small_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_small_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_small_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_small_sign');
  late final _OQS_SIG_cross_rsdp_192_small_sign =
      _OQS_SIG_cross_rsdp_192_small_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_small_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_small_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_small_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_192_small_verify');
  late final _OQS_SIG_cross_rsdp_192_small_verify =
      _OQS_SIG_cross_rsdp_192_small_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_small_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_192_small_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_small_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_small_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_192_small_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_192_small_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_192_small_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_192_small_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_192_small_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_192_small_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_192_small_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_192_small_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_256_balanced_new() {
    return _OQS_SIG_cross_rsdp_256_balanced_new();
  }

  late final _OQS_SIG_cross_rsdp_256_balanced_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_256_balanced_new');
  late final _OQS_SIG_cross_rsdp_256_balanced_new =
      _OQS_SIG_cross_rsdp_256_balanced_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_balanced_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_balanced_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_balanced_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_balanced_keypair');
  late final _OQS_SIG_cross_rsdp_256_balanced_keypair =
      _OQS_SIG_cross_rsdp_256_balanced_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_balanced_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_balanced_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_balanced_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_balanced_sign');
  late final _OQS_SIG_cross_rsdp_256_balanced_sign =
      _OQS_SIG_cross_rsdp_256_balanced_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_balanced_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_balanced_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_balanced_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_balanced_verify');
  late final _OQS_SIG_cross_rsdp_256_balanced_verify =
      _OQS_SIG_cross_rsdp_256_balanced_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_256_fast_new() {
    return _OQS_SIG_cross_rsdp_256_fast_new();
  }

  late final _OQS_SIG_cross_rsdp_256_fast_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_256_fast_new');
  late final _OQS_SIG_cross_rsdp_256_fast_new =
      _OQS_SIG_cross_rsdp_256_fast_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_fast_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_fast_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_fast_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_fast_keypair');
  late final _OQS_SIG_cross_rsdp_256_fast_keypair =
      _OQS_SIG_cross_rsdp_256_fast_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_fast_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_fast_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_fast_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_fast_sign');
  late final _OQS_SIG_cross_rsdp_256_fast_sign =
      _OQS_SIG_cross_rsdp_256_fast_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_fast_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_fast_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_fast_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_fast_verify');
  late final _OQS_SIG_cross_rsdp_256_fast_verify =
      _OQS_SIG_cross_rsdp_256_fast_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdp_256_small_new() {
    return _OQS_SIG_cross_rsdp_256_small_new();
  }

  late final _OQS_SIG_cross_rsdp_256_small_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdp_256_small_new');
  late final _OQS_SIG_cross_rsdp_256_small_new =
      _OQS_SIG_cross_rsdp_256_small_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_small_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_small_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_small_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_small_keypair');
  late final _OQS_SIG_cross_rsdp_256_small_keypair =
      _OQS_SIG_cross_rsdp_256_small_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_small_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_small_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_small_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_small_sign');
  late final _OQS_SIG_cross_rsdp_256_small_sign =
      _OQS_SIG_cross_rsdp_256_small_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_small_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_small_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_small_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdp_256_small_verify');
  late final _OQS_SIG_cross_rsdp_256_small_verify =
      _OQS_SIG_cross_rsdp_256_small_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_small_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdp_256_small_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_small_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_small_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_256_small_sign_with_ctx_str =
      _OQS_SIG_cross_rsdp_256_small_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdp_256_small_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdp_256_small_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdp_256_small_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdp_256_small_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdp_256_small_verify_with_ctx_str =
      _OQS_SIG_cross_rsdp_256_small_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_128_balanced_new() {
    return _OQS_SIG_cross_rsdpg_128_balanced_new();
  }

  late final _OQS_SIG_cross_rsdpg_128_balanced_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_128_balanced_new');
  late final _OQS_SIG_cross_rsdpg_128_balanced_new =
      _OQS_SIG_cross_rsdpg_128_balanced_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_balanced_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_balanced_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_balanced_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_balanced_keypair');
  late final _OQS_SIG_cross_rsdpg_128_balanced_keypair =
      _OQS_SIG_cross_rsdpg_128_balanced_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_balanced_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_balanced_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_balanced_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_balanced_sign');
  late final _OQS_SIG_cross_rsdpg_128_balanced_sign =
      _OQS_SIG_cross_rsdpg_128_balanced_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_balanced_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_balanced_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_balanced_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_balanced_verify');
  late final _OQS_SIG_cross_rsdpg_128_balanced_verify =
      _OQS_SIG_cross_rsdpg_128_balanced_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_128_fast_new() {
    return _OQS_SIG_cross_rsdpg_128_fast_new();
  }

  late final _OQS_SIG_cross_rsdpg_128_fast_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_128_fast_new');
  late final _OQS_SIG_cross_rsdpg_128_fast_new =
      _OQS_SIG_cross_rsdpg_128_fast_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_fast_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_fast_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_fast_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_128_fast_keypair');
  late final _OQS_SIG_cross_rsdpg_128_fast_keypair =
      _OQS_SIG_cross_rsdpg_128_fast_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_fast_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_fast_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_fast_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_128_fast_sign');
  late final _OQS_SIG_cross_rsdpg_128_fast_sign =
      _OQS_SIG_cross_rsdpg_128_fast_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_fast_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_fast_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_fast_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_128_fast_verify');
  late final _OQS_SIG_cross_rsdpg_128_fast_verify =
      _OQS_SIG_cross_rsdpg_128_fast_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_128_small_new() {
    return _OQS_SIG_cross_rsdpg_128_small_new();
  }

  late final _OQS_SIG_cross_rsdpg_128_small_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_128_small_new');
  late final _OQS_SIG_cross_rsdpg_128_small_new =
      _OQS_SIG_cross_rsdpg_128_small_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_small_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_small_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_small_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_small_keypair');
  late final _OQS_SIG_cross_rsdpg_128_small_keypair =
      _OQS_SIG_cross_rsdpg_128_small_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_small_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_small_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_small_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_128_small_sign');
  late final _OQS_SIG_cross_rsdpg_128_small_sign =
      _OQS_SIG_cross_rsdpg_128_small_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_small_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_128_small_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_small_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_128_small_verify');
  late final _OQS_SIG_cross_rsdpg_128_small_verify =
      _OQS_SIG_cross_rsdpg_128_small_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_192_balanced_new() {
    return _OQS_SIG_cross_rsdpg_192_balanced_new();
  }

  late final _OQS_SIG_cross_rsdpg_192_balanced_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_192_balanced_new');
  late final _OQS_SIG_cross_rsdpg_192_balanced_new =
      _OQS_SIG_cross_rsdpg_192_balanced_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_balanced_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_balanced_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_balanced_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_balanced_keypair');
  late final _OQS_SIG_cross_rsdpg_192_balanced_keypair =
      _OQS_SIG_cross_rsdpg_192_balanced_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_balanced_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_balanced_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_balanced_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_balanced_sign');
  late final _OQS_SIG_cross_rsdpg_192_balanced_sign =
      _OQS_SIG_cross_rsdpg_192_balanced_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_balanced_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_balanced_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_balanced_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_balanced_verify');
  late final _OQS_SIG_cross_rsdpg_192_balanced_verify =
      _OQS_SIG_cross_rsdpg_192_balanced_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_192_fast_new() {
    return _OQS_SIG_cross_rsdpg_192_fast_new();
  }

  late final _OQS_SIG_cross_rsdpg_192_fast_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_192_fast_new');
  late final _OQS_SIG_cross_rsdpg_192_fast_new =
      _OQS_SIG_cross_rsdpg_192_fast_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_fast_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_fast_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_fast_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_192_fast_keypair');
  late final _OQS_SIG_cross_rsdpg_192_fast_keypair =
      _OQS_SIG_cross_rsdpg_192_fast_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_fast_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_fast_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_fast_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_192_fast_sign');
  late final _OQS_SIG_cross_rsdpg_192_fast_sign =
      _OQS_SIG_cross_rsdpg_192_fast_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_fast_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_fast_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_fast_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_192_fast_verify');
  late final _OQS_SIG_cross_rsdpg_192_fast_verify =
      _OQS_SIG_cross_rsdpg_192_fast_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_192_small_new() {
    return _OQS_SIG_cross_rsdpg_192_small_new();
  }

  late final _OQS_SIG_cross_rsdpg_192_small_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_192_small_new');
  late final _OQS_SIG_cross_rsdpg_192_small_new =
      _OQS_SIG_cross_rsdpg_192_small_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_small_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_small_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_small_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_small_keypair');
  late final _OQS_SIG_cross_rsdpg_192_small_keypair =
      _OQS_SIG_cross_rsdpg_192_small_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_small_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_small_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_small_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_192_small_sign');
  late final _OQS_SIG_cross_rsdpg_192_small_sign =
      _OQS_SIG_cross_rsdpg_192_small_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_small_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_192_small_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_small_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_192_small_verify');
  late final _OQS_SIG_cross_rsdpg_192_small_verify =
      _OQS_SIG_cross_rsdpg_192_small_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_256_balanced_new() {
    return _OQS_SIG_cross_rsdpg_256_balanced_new();
  }

  late final _OQS_SIG_cross_rsdpg_256_balanced_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_256_balanced_new');
  late final _OQS_SIG_cross_rsdpg_256_balanced_new =
      _OQS_SIG_cross_rsdpg_256_balanced_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_balanced_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_balanced_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_balanced_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_balanced_keypair');
  late final _OQS_SIG_cross_rsdpg_256_balanced_keypair =
      _OQS_SIG_cross_rsdpg_256_balanced_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_balanced_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_balanced_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_balanced_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_balanced_sign');
  late final _OQS_SIG_cross_rsdpg_256_balanced_sign =
      _OQS_SIG_cross_rsdpg_256_balanced_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_balanced_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_balanced_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_balanced_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_balanced_verify');
  late final _OQS_SIG_cross_rsdpg_256_balanced_verify =
      _OQS_SIG_cross_rsdpg_256_balanced_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_256_fast_new() {
    return _OQS_SIG_cross_rsdpg_256_fast_new();
  }

  late final _OQS_SIG_cross_rsdpg_256_fast_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_256_fast_new');
  late final _OQS_SIG_cross_rsdpg_256_fast_new =
      _OQS_SIG_cross_rsdpg_256_fast_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_fast_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_fast_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_fast_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_256_fast_keypair');
  late final _OQS_SIG_cross_rsdpg_256_fast_keypair =
      _OQS_SIG_cross_rsdpg_256_fast_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_fast_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_fast_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_fast_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_256_fast_sign');
  late final _OQS_SIG_cross_rsdpg_256_fast_sign =
      _OQS_SIG_cross_rsdpg_256_fast_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_fast_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_fast_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_fast_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_256_fast_verify');
  late final _OQS_SIG_cross_rsdpg_256_fast_verify =
      _OQS_SIG_cross_rsdpg_256_fast_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_cross_rsdpg_256_small_new() {
    return _OQS_SIG_cross_rsdpg_256_small_new();
  }

  late final _OQS_SIG_cross_rsdpg_256_small_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_cross_rsdpg_256_small_new');
  late final _OQS_SIG_cross_rsdpg_256_small_new =
      _OQS_SIG_cross_rsdpg_256_small_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_small_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_small_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_small_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_small_keypair');
  late final _OQS_SIG_cross_rsdpg_256_small_keypair =
      _OQS_SIG_cross_rsdpg_256_small_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_small_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_small_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_small_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_256_small_sign');
  late final _OQS_SIG_cross_rsdpg_256_small_sign =
      _OQS_SIG_cross_rsdpg_256_small_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_small_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_cross_rsdpg_256_small_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_small_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_cross_rsdpg_256_small_verify');
  late final _OQS_SIG_cross_rsdpg_256_small_verify =
      _OQS_SIG_cross_rsdpg_256_small_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_str =
      _OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_str');
  late final _OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_str =
      _OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_Is_new() {
    return _OQS_SIG_uov_ov_Is_new();
  }

  late final _OQS_SIG_uov_ov_Is_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_Is_new');
  late final _OQS_SIG_uov_ov_Is_new =
      _OQS_SIG_uov_ov_Is_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_Is_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_keypair');
  late final _OQS_SIG_uov_ov_Is_keypair =
      _OQS_SIG_uov_ov_Is_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_sign');
  late final _OQS_SIG_uov_ov_Is_sign = _OQS_SIG_uov_ov_Is_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_verify');
  late final _OQS_SIG_uov_ov_Is_verify =
      _OQS_SIG_uov_ov_Is_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_Is_sign_with_ctx_str =
      _OQS_SIG_uov_ov_Is_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Is_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_Is_verify_with_ctx_str =
      _OQS_SIG_uov_ov_Is_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_Ip_new() {
    return _OQS_SIG_uov_ov_Ip_new();
  }

  late final _OQS_SIG_uov_ov_Ip_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_Ip_new');
  late final _OQS_SIG_uov_ov_Ip_new =
      _OQS_SIG_uov_ov_Ip_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_keypair');
  late final _OQS_SIG_uov_ov_Ip_keypair =
      _OQS_SIG_uov_ov_Ip_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_sign');
  late final _OQS_SIG_uov_ov_Ip_sign = _OQS_SIG_uov_ov_Ip_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_verify');
  late final _OQS_SIG_uov_ov_Ip_verify =
      _OQS_SIG_uov_ov_Ip_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_Ip_sign_with_ctx_str =
      _OQS_SIG_uov_ov_Ip_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Ip_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_Ip_verify_with_ctx_str =
      _OQS_SIG_uov_ov_Ip_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_III_new() {
    return _OQS_SIG_uov_ov_III_new();
  }

  late final _OQS_SIG_uov_ov_III_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_III_new');
  late final _OQS_SIG_uov_ov_III_new =
      _OQS_SIG_uov_ov_III_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_III_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_keypair');
  late final _OQS_SIG_uov_ov_III_keypair =
      _OQS_SIG_uov_ov_III_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_sign');
  late final _OQS_SIG_uov_ov_III_sign = _OQS_SIG_uov_ov_III_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_verify');
  late final _OQS_SIG_uov_ov_III_verify =
      _OQS_SIG_uov_ov_III_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_III_sign_with_ctx_str =
      _OQS_SIG_uov_ov_III_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_III_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_III_verify_with_ctx_str =
      _OQS_SIG_uov_ov_III_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_V_new() {
    return _OQS_SIG_uov_ov_V_new();
  }

  late final _OQS_SIG_uov_ov_V_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_V_new');
  late final _OQS_SIG_uov_ov_V_new =
      _OQS_SIG_uov_ov_V_newPtr.asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_V_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_keypair');
  late final _OQS_SIG_uov_ov_V_keypair =
      _OQS_SIG_uov_ov_V_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_sign');
  late final _OQS_SIG_uov_ov_V_sign = _OQS_SIG_uov_ov_V_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_verify');
  late final _OQS_SIG_uov_ov_V_verify = _OQS_SIG_uov_ov_V_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_sign_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_V_sign_with_ctx_str =
      _OQS_SIG_uov_ov_V_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_verify_with_ctx_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_V_verify_with_ctx_str =
      _OQS_SIG_uov_ov_V_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_Is_pkc_new() {
    return _OQS_SIG_uov_ov_Is_pkc_new();
  }

  late final _OQS_SIG_uov_ov_Is_pkc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_Is_pkc_new');
  late final _OQS_SIG_uov_ov_Is_pkc_new = _OQS_SIG_uov_ov_Is_pkc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_pkc_keypair');
  late final _OQS_SIG_uov_ov_Is_pkc_keypair =
      _OQS_SIG_uov_ov_Is_pkc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_pkc_sign');
  late final _OQS_SIG_uov_ov_Is_pkc_sign =
      _OQS_SIG_uov_ov_Is_pkc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_pkc_verify');
  late final _OQS_SIG_uov_ov_Is_pkc_verify =
      _OQS_SIG_uov_ov_Is_pkc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Is_pkc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_Is_pkc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_Is_pkc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Is_pkc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_Is_pkc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_Is_pkc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_Ip_pkc_new() {
    return _OQS_SIG_uov_ov_Ip_pkc_new();
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_Ip_pkc_new');
  late final _OQS_SIG_uov_ov_Ip_pkc_new = _OQS_SIG_uov_ov_Ip_pkc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_pkc_keypair');
  late final _OQS_SIG_uov_ov_Ip_pkc_keypair =
      _OQS_SIG_uov_ov_Ip_pkc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_pkc_sign');
  late final _OQS_SIG_uov_ov_Ip_pkc_sign =
      _OQS_SIG_uov_ov_Ip_pkc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_pkc_verify');
  late final _OQS_SIG_uov_ov_Ip_pkc_verify =
      _OQS_SIG_uov_ov_Ip_pkc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Ip_pkc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_Ip_pkc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_Ip_pkc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Ip_pkc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_Ip_pkc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_Ip_pkc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_III_pkc_new() {
    return _OQS_SIG_uov_ov_III_pkc_new();
  }

  late final _OQS_SIG_uov_ov_III_pkc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_III_pkc_new');
  late final _OQS_SIG_uov_ov_III_pkc_new = _OQS_SIG_uov_ov_III_pkc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_pkc_keypair');
  late final _OQS_SIG_uov_ov_III_pkc_keypair =
      _OQS_SIG_uov_ov_III_pkc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_pkc_sign');
  late final _OQS_SIG_uov_ov_III_pkc_sign =
      _OQS_SIG_uov_ov_III_pkc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_pkc_verify');
  late final _OQS_SIG_uov_ov_III_pkc_verify =
      _OQS_SIG_uov_ov_III_pkc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_III_pkc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_III_pkc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_III_pkc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_III_pkc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_III_pkc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_III_pkc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_V_pkc_new() {
    return _OQS_SIG_uov_ov_V_pkc_new();
  }

  late final _OQS_SIG_uov_ov_V_pkc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_V_pkc_new');
  late final _OQS_SIG_uov_ov_V_pkc_new = _OQS_SIG_uov_ov_V_pkc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_pkc_keypair');
  late final _OQS_SIG_uov_ov_V_pkc_keypair =
      _OQS_SIG_uov_ov_V_pkc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_pkc_sign');
  late final _OQS_SIG_uov_ov_V_pkc_sign =
      _OQS_SIG_uov_ov_V_pkc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_pkc_verify');
  late final _OQS_SIG_uov_ov_V_pkc_verify =
      _OQS_SIG_uov_ov_V_pkc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_V_pkc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_V_pkc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_V_pkc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_V_pkc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_V_pkc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_V_pkc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_Is_pkc_skc_new() {
    return _OQS_SIG_uov_ov_Is_pkc_skc_new();
  }

  late final _OQS_SIG_uov_ov_Is_pkc_skc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_Is_pkc_skc_new');
  late final _OQS_SIG_uov_ov_Is_pkc_skc_new = _OQS_SIG_uov_ov_Is_pkc_skc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_skc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_skc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_skc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_pkc_skc_keypair');
  late final _OQS_SIG_uov_ov_Is_pkc_skc_keypair =
      _OQS_SIG_uov_ov_Is_pkc_skc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_skc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_skc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_skc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_pkc_skc_sign');
  late final _OQS_SIG_uov_ov_Is_pkc_skc_sign =
      _OQS_SIG_uov_ov_Is_pkc_skc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_skc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_skc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_skc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Is_pkc_skc_verify');
  late final _OQS_SIG_uov_ov_Is_pkc_skc_verify =
      _OQS_SIG_uov_ov_Is_pkc_skc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_skc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_skc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_skc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Is_pkc_skc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_Is_pkc_skc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_Is_pkc_skc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Is_pkc_skc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Is_pkc_skc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Is_pkc_skc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Is_pkc_skc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_Is_pkc_skc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_Is_pkc_skc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_Ip_pkc_skc_new() {
    return _OQS_SIG_uov_ov_Ip_pkc_skc_new();
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_skc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_Ip_pkc_skc_new');
  late final _OQS_SIG_uov_ov_Ip_pkc_skc_new = _OQS_SIG_uov_ov_Ip_pkc_skc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_skc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_skc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_skc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_pkc_skc_keypair');
  late final _OQS_SIG_uov_ov_Ip_pkc_skc_keypair =
      _OQS_SIG_uov_ov_Ip_pkc_skc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_skc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_skc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_skc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_pkc_skc_sign');
  late final _OQS_SIG_uov_ov_Ip_pkc_skc_sign =
      _OQS_SIG_uov_ov_Ip_pkc_skc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_skc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_skc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_skc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_Ip_pkc_skc_verify');
  late final _OQS_SIG_uov_ov_Ip_pkc_skc_verify =
      _OQS_SIG_uov_ov_Ip_pkc_skc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_skc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_skc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_skc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Ip_pkc_skc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_Ip_pkc_skc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_Ip_pkc_skc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_Ip_pkc_skc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_Ip_pkc_skc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_Ip_pkc_skc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_Ip_pkc_skc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_Ip_pkc_skc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_Ip_pkc_skc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_III_pkc_skc_new() {
    return _OQS_SIG_uov_ov_III_pkc_skc_new();
  }

  late final _OQS_SIG_uov_ov_III_pkc_skc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_III_pkc_skc_new');
  late final _OQS_SIG_uov_ov_III_pkc_skc_new =
      _OQS_SIG_uov_ov_III_pkc_skc_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_skc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_skc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_skc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_pkc_skc_keypair');
  late final _OQS_SIG_uov_ov_III_pkc_skc_keypair =
      _OQS_SIG_uov_ov_III_pkc_skc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_skc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_skc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_skc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_pkc_skc_sign');
  late final _OQS_SIG_uov_ov_III_pkc_skc_sign =
      _OQS_SIG_uov_ov_III_pkc_skc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_skc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_skc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_skc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_III_pkc_skc_verify');
  late final _OQS_SIG_uov_ov_III_pkc_skc_verify =
      _OQS_SIG_uov_ov_III_pkc_skc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_skc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_skc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_skc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_III_pkc_skc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_III_pkc_skc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_III_pkc_skc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_III_pkc_skc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_III_pkc_skc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_III_pkc_skc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_III_pkc_skc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_III_pkc_skc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_III_pkc_skc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_uov_ov_V_pkc_skc_new() {
    return _OQS_SIG_uov_ov_V_pkc_skc_new();
  }

  late final _OQS_SIG_uov_ov_V_pkc_skc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_uov_ov_V_pkc_skc_new');
  late final _OQS_SIG_uov_ov_V_pkc_skc_new = _OQS_SIG_uov_ov_V_pkc_skc_newPtr
      .asFunction<ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_skc_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_skc_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_skc_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_pkc_skc_keypair');
  late final _OQS_SIG_uov_ov_V_pkc_skc_keypair =
      _OQS_SIG_uov_ov_V_pkc_skc_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_skc_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_skc_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_skc_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_pkc_skc_sign');
  late final _OQS_SIG_uov_ov_V_pkc_skc_sign =
      _OQS_SIG_uov_ov_V_pkc_skc_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_skc_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_skc_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_skc_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_uov_ov_V_pkc_skc_verify');
  late final _OQS_SIG_uov_ov_V_pkc_skc_verify =
      _OQS_SIG_uov_ov_V_pkc_skc_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_skc_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_skc_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_skc_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_V_pkc_skc_sign_with_ctx_str');
  late final _OQS_SIG_uov_ov_V_pkc_skc_sign_with_ctx_str =
      _OQS_SIG_uov_ov_V_pkc_skc_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_uov_ov_V_pkc_skc_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_uov_ov_V_pkc_skc_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_uov_ov_V_pkc_skc_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_uov_ov_V_pkc_skc_verify_with_ctx_str');
  late final _OQS_SIG_uov_ov_V_pkc_skc_verify_with_ctx_str =
      _OQS_SIG_uov_ov_V_pkc_skc_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_24_5_4_new() {
    return _OQS_SIG_snova_SNOVA_24_5_4_new();
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_24_5_4_new');
  late final _OQS_SIG_snova_SNOVA_24_5_4_new =
      _OQS_SIG_snova_SNOVA_24_5_4_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_4_keypair');
  late final _OQS_SIG_snova_SNOVA_24_5_4_keypair =
      _OQS_SIG_snova_SNOVA_24_5_4_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_4_sign');
  late final _OQS_SIG_snova_SNOVA_24_5_4_sign =
      _OQS_SIG_snova_SNOVA_24_5_4_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_4_verify');
  late final _OQS_SIG_snova_SNOVA_24_5_4_verify =
      _OQS_SIG_snova_SNOVA_24_5_4_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_24_5_4_SHAKE_new() {
    return _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_new();
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_new');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_new =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_keypair');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_keypair =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_24_5_4_esk_new() {
    return _OQS_SIG_snova_SNOVA_24_5_4_esk_new();
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_24_5_4_esk_new');
  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_new =
      _OQS_SIG_snova_SNOVA_24_5_4_esk_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_esk_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_esk_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_esk_keypair');
  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_keypair =
      _OQS_SIG_snova_SNOVA_24_5_4_esk_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_esk_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_esk_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_4_esk_sign');
  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_sign =
      _OQS_SIG_snova_SNOVA_24_5_4_esk_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_esk_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_esk_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_esk_verify');
  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_verify =
      _OQS_SIG_snova_SNOVA_24_5_4_esk_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_esk_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_24_5_4_esk_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_esk_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_esk_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_esk_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_24_5_4_esk_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_esk_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_esk_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_esk_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_new() {
    return _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_new();
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_new');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_new =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_keypairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_keypair');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_keypair =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
                  ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Pointer<ffi.Size>,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify_with_ctx_strPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>,
                      ffi.Size,
                      ffi.Pointer<ffi.Uint8>)>>(
          'OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_37_17_2_new() {
    return _OQS_SIG_snova_SNOVA_37_17_2_new();
  }

  late final _OQS_SIG_snova_SNOVA_37_17_2_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_37_17_2_new');
  late final _OQS_SIG_snova_SNOVA_37_17_2_new =
      _OQS_SIG_snova_SNOVA_37_17_2_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_17_2_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_17_2_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_17_2_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_37_17_2_keypair');
  late final _OQS_SIG_snova_SNOVA_37_17_2_keypair =
      _OQS_SIG_snova_SNOVA_37_17_2_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_17_2_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_17_2_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_17_2_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_37_17_2_sign');
  late final _OQS_SIG_snova_SNOVA_37_17_2_sign =
      _OQS_SIG_snova_SNOVA_37_17_2_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_17_2_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_17_2_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_17_2_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_37_17_2_verify');
  late final _OQS_SIG_snova_SNOVA_37_17_2_verify =
      _OQS_SIG_snova_SNOVA_37_17_2_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_17_2_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_17_2_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_17_2_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_37_17_2_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_37_17_2_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_37_17_2_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_17_2_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_37_17_2_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_17_2_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_37_17_2_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_37_17_2_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_37_17_2_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_25_8_3_new() {
    return _OQS_SIG_snova_SNOVA_25_8_3_new();
  }

  late final _OQS_SIG_snova_SNOVA_25_8_3_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_25_8_3_new');
  late final _OQS_SIG_snova_SNOVA_25_8_3_new =
      _OQS_SIG_snova_SNOVA_25_8_3_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_25_8_3_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_25_8_3_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_25_8_3_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_25_8_3_keypair');
  late final _OQS_SIG_snova_SNOVA_25_8_3_keypair =
      _OQS_SIG_snova_SNOVA_25_8_3_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_25_8_3_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_25_8_3_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_25_8_3_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_25_8_3_sign');
  late final _OQS_SIG_snova_SNOVA_25_8_3_sign =
      _OQS_SIG_snova_SNOVA_25_8_3_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_25_8_3_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_25_8_3_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_25_8_3_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_25_8_3_verify');
  late final _OQS_SIG_snova_SNOVA_25_8_3_verify =
      _OQS_SIG_snova_SNOVA_25_8_3_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_25_8_3_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_25_8_3_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_25_8_3_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_25_8_3_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_25_8_3_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_25_8_3_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_25_8_3_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_25_8_3_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_25_8_3_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_25_8_3_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_25_8_3_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_25_8_3_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_56_25_2_new() {
    return _OQS_SIG_snova_SNOVA_56_25_2_new();
  }

  late final _OQS_SIG_snova_SNOVA_56_25_2_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_56_25_2_new');
  late final _OQS_SIG_snova_SNOVA_56_25_2_new =
      _OQS_SIG_snova_SNOVA_56_25_2_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_56_25_2_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_56_25_2_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_56_25_2_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_56_25_2_keypair');
  late final _OQS_SIG_snova_SNOVA_56_25_2_keypair =
      _OQS_SIG_snova_SNOVA_56_25_2_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_56_25_2_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_56_25_2_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_56_25_2_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_56_25_2_sign');
  late final _OQS_SIG_snova_SNOVA_56_25_2_sign =
      _OQS_SIG_snova_SNOVA_56_25_2_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_56_25_2_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_56_25_2_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_56_25_2_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_56_25_2_verify');
  late final _OQS_SIG_snova_SNOVA_56_25_2_verify =
      _OQS_SIG_snova_SNOVA_56_25_2_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_56_25_2_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_56_25_2_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_56_25_2_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_56_25_2_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_56_25_2_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_56_25_2_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_56_25_2_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_56_25_2_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_56_25_2_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_56_25_2_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_56_25_2_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_56_25_2_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_49_11_3_new() {
    return _OQS_SIG_snova_SNOVA_49_11_3_new();
  }

  late final _OQS_SIG_snova_SNOVA_49_11_3_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_49_11_3_new');
  late final _OQS_SIG_snova_SNOVA_49_11_3_new =
      _OQS_SIG_snova_SNOVA_49_11_3_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_49_11_3_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_49_11_3_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_49_11_3_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_49_11_3_keypair');
  late final _OQS_SIG_snova_SNOVA_49_11_3_keypair =
      _OQS_SIG_snova_SNOVA_49_11_3_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_49_11_3_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_49_11_3_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_49_11_3_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_49_11_3_sign');
  late final _OQS_SIG_snova_SNOVA_49_11_3_sign =
      _OQS_SIG_snova_SNOVA_49_11_3_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_49_11_3_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_49_11_3_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_49_11_3_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_49_11_3_verify');
  late final _OQS_SIG_snova_SNOVA_49_11_3_verify =
      _OQS_SIG_snova_SNOVA_49_11_3_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_49_11_3_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_49_11_3_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_49_11_3_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_49_11_3_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_49_11_3_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_49_11_3_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_49_11_3_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_49_11_3_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_49_11_3_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_49_11_3_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_49_11_3_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_49_11_3_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_37_8_4_new() {
    return _OQS_SIG_snova_SNOVA_37_8_4_new();
  }

  late final _OQS_SIG_snova_SNOVA_37_8_4_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_37_8_4_new');
  late final _OQS_SIG_snova_SNOVA_37_8_4_new =
      _OQS_SIG_snova_SNOVA_37_8_4_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_8_4_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_8_4_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_8_4_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_37_8_4_keypair');
  late final _OQS_SIG_snova_SNOVA_37_8_4_keypair =
      _OQS_SIG_snova_SNOVA_37_8_4_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_8_4_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_8_4_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_8_4_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_37_8_4_sign');
  late final _OQS_SIG_snova_SNOVA_37_8_4_sign =
      _OQS_SIG_snova_SNOVA_37_8_4_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_8_4_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_8_4_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_8_4_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_37_8_4_verify');
  late final _OQS_SIG_snova_SNOVA_37_8_4_verify =
      _OQS_SIG_snova_SNOVA_37_8_4_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_8_4_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_8_4_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_8_4_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_37_8_4_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_37_8_4_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_37_8_4_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_37_8_4_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_37_8_4_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_37_8_4_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_37_8_4_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_37_8_4_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_37_8_4_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_24_5_5_new() {
    return _OQS_SIG_snova_SNOVA_24_5_5_new();
  }

  late final _OQS_SIG_snova_SNOVA_24_5_5_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_24_5_5_new');
  late final _OQS_SIG_snova_SNOVA_24_5_5_new =
      _OQS_SIG_snova_SNOVA_24_5_5_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_5_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_5_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_5_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_5_keypair');
  late final _OQS_SIG_snova_SNOVA_24_5_5_keypair =
      _OQS_SIG_snova_SNOVA_24_5_5_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_5_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_5_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_5_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_5_sign');
  late final _OQS_SIG_snova_SNOVA_24_5_5_sign =
      _OQS_SIG_snova_SNOVA_24_5_5_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_5_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_5_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_5_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_24_5_5_verify');
  late final _OQS_SIG_snova_SNOVA_24_5_5_verify =
      _OQS_SIG_snova_SNOVA_24_5_5_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_5_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_5_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_5_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_5_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_5_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_5_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_24_5_5_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_24_5_5_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_24_5_5_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_24_5_5_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_24_5_5_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_24_5_5_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_60_10_4_new() {
    return _OQS_SIG_snova_SNOVA_60_10_4_new();
  }

  late final _OQS_SIG_snova_SNOVA_60_10_4_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_60_10_4_new');
  late final _OQS_SIG_snova_SNOVA_60_10_4_new =
      _OQS_SIG_snova_SNOVA_60_10_4_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_60_10_4_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_60_10_4_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_60_10_4_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_60_10_4_keypair');
  late final _OQS_SIG_snova_SNOVA_60_10_4_keypair =
      _OQS_SIG_snova_SNOVA_60_10_4_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_60_10_4_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_60_10_4_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_60_10_4_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_60_10_4_sign');
  late final _OQS_SIG_snova_SNOVA_60_10_4_sign =
      _OQS_SIG_snova_SNOVA_60_10_4_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_60_10_4_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_60_10_4_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_60_10_4_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_60_10_4_verify');
  late final _OQS_SIG_snova_SNOVA_60_10_4_verify =
      _OQS_SIG_snova_SNOVA_60_10_4_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_60_10_4_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_60_10_4_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_60_10_4_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_60_10_4_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_60_10_4_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_60_10_4_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_60_10_4_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS
        .fromValue(_OQS_SIG_snova_SNOVA_60_10_4_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_60_10_4_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_60_10_4_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_60_10_4_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_60_10_4_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<OQS_SIG> OQS_SIG_snova_SNOVA_29_6_5_new() {
    return _OQS_SIG_snova_SNOVA_29_6_5_new();
  }

  late final _OQS_SIG_snova_SNOVA_29_6_5_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OQS_SIG> Function()>>(
          'OQS_SIG_snova_SNOVA_29_6_5_new');
  late final _OQS_SIG_snova_SNOVA_29_6_5_new =
      _OQS_SIG_snova_SNOVA_29_6_5_newPtr.asFunction<
          ffi.Pointer<OQS_SIG> Function()>();

  OQS_STATUS OQS_SIG_snova_SNOVA_29_6_5_keypair(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_29_6_5_keypair(
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_29_6_5_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_29_6_5_keypair');
  late final _OQS_SIG_snova_SNOVA_29_6_5_keypair =
      _OQS_SIG_snova_SNOVA_29_6_5_keypairPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_29_6_5_sign(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_29_6_5_sign(
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_29_6_5_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_29_6_5_sign');
  late final _OQS_SIG_snova_SNOVA_29_6_5_sign =
      _OQS_SIG_snova_SNOVA_29_6_5_signPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_29_6_5_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_29_6_5_verify(
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_29_6_5_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_snova_SNOVA_29_6_5_verify');
  late final _OQS_SIG_snova_SNOVA_29_6_5_verify =
      _OQS_SIG_snova_SNOVA_29_6_5_verifyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_29_6_5_sign_with_ctx_str(
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_29_6_5_sign_with_ctx_str(
      signature,
      signature_len,
      message,
      message_len,
      ctx,
      ctxlen,
      secret_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_29_6_5_sign_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_29_6_5_sign_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_29_6_5_sign_with_ctx_str =
      _OQS_SIG_snova_SNOVA_29_6_5_sign_with_ctx_strPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  OQS_STATUS OQS_SIG_snova_SNOVA_29_6_5_verify_with_ctx_str(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> ctx,
    int ctxlen,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_snova_SNOVA_29_6_5_verify_with_ctx_str(
      message,
      message_len,
      signature,
      signature_len,
      ctx,
      ctxlen,
      public_key,
    ));
  }

  late final _OQS_SIG_snova_SNOVA_29_6_5_verify_with_ctx_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>)>>(
      'OQS_SIG_snova_SNOVA_29_6_5_verify_with_ctx_str');
  late final _OQS_SIG_snova_SNOVA_29_6_5_verify_with_ctx_str =
      _OQS_SIG_snova_SNOVA_29_6_5_verify_with_ctx_strPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  /// Returns identifiers for available signature schemes in liboqs.  Used with `OQS_SIG_STFL_new`.
  ///
  /// Note that algorithm identifiers are present in this list even when the algorithm is disabled
  /// at compile time.
  ///
  /// @param[in] i Index of the algorithm identifier to return, 0 <= i < OQS_SIG_algs_length
  /// @return Algorithm identifier as a string, or NULL.
  ffi.Pointer<ffi.Char> OQS_SIG_STFL_alg_identifier(
    int i,
  ) {
    return _OQS_SIG_STFL_alg_identifier(
      i,
    );
  }

  late final _OQS_SIG_STFL_alg_identifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Size)>>(
          'OQS_SIG_STFL_alg_identifier');
  late final _OQS_SIG_STFL_alg_identifier = _OQS_SIG_STFL_alg_identifierPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Returns the number of stateful signature mechanisms in liboqs.  They can be enumerated with
  /// OQS_SIG_STFL_alg_identifier.
  ///
  /// Note that some mechanisms may be disabled at compile time.
  ///
  /// @return The number of stateful signature mechanisms.
  int OQS_SIG_STFL_alg_count() {
    return _OQS_SIG_STFL_alg_count();
  }

  late final _OQS_SIG_STFL_alg_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OQS_SIG_STFL_alg_count');
  late final _OQS_SIG_STFL_alg_count =
      _OQS_SIG_STFL_alg_countPtr.asFunction<int Function()>();

  /// Indicates whether the specified algorithm was enabled at compile-time or not.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_SIG_STFL_algs`.
  /// @return 1 if enabled, 0 if disabled or not found
  int OQS_SIG_STFL_alg_is_enabled(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_SIG_STFL_alg_is_enabled(
      method_name,
    );
  }

  late final _OQS_SIG_STFL_alg_is_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OQS_SIG_STFL_alg_is_enabled');
  late final _OQS_SIG_STFL_alg_is_enabled = _OQS_SIG_STFL_alg_is_enabledPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Constructs an OQS_SIG_STFL object for a particular algorithm.
  ///
  /// Callers should always check whether the return value is `NULL`, which indicates either than an
  /// invalid algorithm name was provided, or that the requested algorithm was disabled at compile-time.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_SIG_STFL_algs`.
  /// @return An OQS_SIG_STFL for the particular algorithm, or `NULL` if the algorithm has been disabled at compile-time.
  ffi.Pointer<OQS_SIG> OQS_SIG_STFL_new(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_SIG_STFL_new(
      method_name,
    );
  }

  late final _OQS_SIG_STFL_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OQS_SIG> Function(
              ffi.Pointer<ffi.Char>)>>('OQS_SIG_STFL_new');
  late final _OQS_SIG_STFL_new = _OQS_SIG_STFL_newPtr.asFunction<
      ffi.Pointer<OQS_SIG> Function(ffi.Pointer<ffi.Char>)>();

  /// Keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` based
  /// on the `length_*` members in this object or the per-scheme compile-time macros
  /// `OQS_SIG_STFL_*_length_*`. The caller is also responsible for initializing
  /// `secret_key` using the OQS_SIG_STFL_SECRET_KEY(*) function.
  ///
  /// @param[in] sig The OQS_SIG_STFL object representing the signature scheme.
  /// @param[out] public_key The public key is represented as a byte string.
  /// @param[out] secret_key The secret key object pointer.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_STFL_keypair(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_keypair(
      sig,
      public_key,
      secret_key,
    ));
  }

  late final _OQS_SIG_STFL_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>('OQS_SIG_STFL_keypair');
  late final _OQS_SIG_STFL_keypair = _OQS_SIG_STFL_keypairPtr.asFunction<
      int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Signature generation algorithm.
  ///
  /// For stateful signatures, there is always a limited number of signatures that can be used,
  /// The private key signature counter is increased by one once a signature is successfully generated,
  /// When the signature counter reaches the maximum number of available signatures, the signature generation always fails.
  ///
  /// Caller is responsible for allocating sufficient memory for `signature`,
  /// based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_STFL_*_length_*`.
  ///
  /// @param[in] sig The OQS_SIG_STFL object representing the signature scheme.
  /// @param[out] signature The signature on the message is represented as a byte string.
  /// @param[out] signature_len The length of the signature.
  /// @param[in] message The message to sign is represented as a byte string.
  /// @param[in] message_len The length of the message to sign.
  /// @param[in] secret_key The secret key object pointer.
  /// @return OQS_SUCCESS or OQS_ERROR
  ///
  /// @note Internally, if `lock/unlock` functions and `mutex` are set, it will attempt to lock the private key and unlock
  /// the private key after the Signing operation is completed.
  OQS_STATUS OQS_SIG_STFL_sign(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Size> signature_len,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_sign(
      sig,
      signature,
      signature_len,
      message,
      message_len,
      secret_key,
    ));
  }

  late final _OQS_SIG_STFL_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>('OQS_SIG_STFL_sign');
  late final _OQS_SIG_STFL_sign = _OQS_SIG_STFL_signPtr.asFunction<
      int Function(
          ffi.Pointer<OQS_SIG>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Signature verification algorithm.
  ///
  /// @param[in] sig The OQS_SIG_STFL object representing the signature scheme.
  /// @param[in] message The message is represented as a byte string.
  /// @param[in] message_len The length of the message.
  /// @param[in] signature The signature on the message is represented as a byte string.
  /// @param[in] signature_len The length of the signature.
  /// @param[in] public_key The public key is represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_STFL_verify(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_verify(
      sig,
      message,
      message_len,
      signature,
      signature_len,
      public_key,
    ));
  }

  late final _OQS_SIG_STFL_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('OQS_SIG_STFL_verify');
  late final _OQS_SIG_STFL_verify = _OQS_SIG_STFL_verifyPtr.asFunction<
      int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  /// Query the number of remaining signatures.
  ///
  /// The remaining signatures are the number of signatures available before the private key runs out of its total signature and expires.
  ///
  /// @param[in] sig The OQS_SIG_STFL object representing the signature scheme.
  /// @param[in] remain The number of remaining signatures.
  /// @param[in] secret_key The secret key object.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_STFL_sigs_remaining(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.UnsignedLongLong> remain,
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_sigs_remaining(
      sig,
      remain,
      secret_key,
    ));
  }

  late final _OQS_SIG_STFL_sigs_remainingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<OQS_SIG>,
                  ffi.Pointer<ffi.UnsignedLongLong>,
                  ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>(
      'OQS_SIG_STFL_sigs_remaining');
  late final _OQS_SIG_STFL_sigs_remaining =
      _OQS_SIG_STFL_sigs_remainingPtr.asFunction<
          int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.UnsignedLongLong>,
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Query the total number of signatures.
  ///
  /// The total number of signatures is the constant number present in how many signatures can be generated from a private key.
  ///
  /// @param[in] sig The OQS_SIG_STFL object representing the signature scheme.
  /// @param[out] max The number of remaining signatures
  /// @param[in] secret_key The secret key object.
  /// @return OQS_SUCCESS or OQS_ERROR
  OQS_STATUS OQS_SIG_STFL_sigs_total(
    ffi.Pointer<OQS_SIG> sig,
    ffi.Pointer<ffi.UnsignedLongLong> max,
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> secret_key,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_sigs_total(
      sig,
      max,
      secret_key,
    ));
  }

  late final _OQS_SIG_STFL_sigs_totalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<OQS_SIG>,
                  ffi.Pointer<ffi.UnsignedLongLong>,
                  ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>(
      'OQS_SIG_STFL_sigs_total');
  late final _OQS_SIG_STFL_sigs_total = _OQS_SIG_STFL_sigs_totalPtr.asFunction<
      int Function(ffi.Pointer<OQS_SIG>, ffi.Pointer<ffi.UnsignedLongLong>,
          ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Free an OQS_SIG_STFL object that was constructed by OQS_SIG_STFL_new.
  void OQS_SIG_STFL_free(
    ffi.Pointer<OQS_SIG> sig,
  ) {
    return _OQS_SIG_STFL_free(
      sig,
    );
  }

  late final _OQS_SIG_STFL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OQS_SIG>)>>(
          'OQS_SIG_STFL_free');
  late final _OQS_SIG_STFL_free =
      _OQS_SIG_STFL_freePtr.asFunction<void Function(ffi.Pointer<OQS_SIG>)>();

  /// Construct an OQS_SIG_STFL_SECRET_KEY object for a particular algorithm.
  ///
  /// Callers should always check whether the return value is `NULL`, which indicates either than an
  /// invalid algorithm name was provided, or that the requested algorithm was disabled at compile-time.
  ///
  /// @param[in] method_name Name of the desired algorithm; one of the names in `OQS_SIG_STFL_algs`.
  /// @return An OQS_SIG_STFL_SECRET_KEY for the particular algorithm, or `NULL` if the algorithm has been disabled at compile-time.
  ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> OQS_SIG_STFL_SECRET_KEY_new(
    ffi.Pointer<ffi.Char> method_name,
  ) {
    return _OQS_SIG_STFL_SECRET_KEY_new(
      method_name,
    );
  }

  late final _OQS_SIG_STFL_SECRET_KEY_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> Function(
              ffi.Pointer<ffi.Char>)>>('OQS_SIG_STFL_SECRET_KEY_new');
  late final _OQS_SIG_STFL_SECRET_KEY_new =
      _OQS_SIG_STFL_SECRET_KEY_newPtr.asFunction<
          ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> Function(
              ffi.Pointer<ffi.Char>)>();

  /// Free an OQS_SIG_STFL_SECRET_KEY object that was constructed by OQS_SECRET_KEY_new.
  ///
  /// @param[in] sk The OQS_SIG_STFL_SECRET_KEY object to free.
  void OQS_SIG_STFL_SECRET_KEY_free(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
  ) {
    return _OQS_SIG_STFL_SECRET_KEY_free(
      sk,
    );
  }

  late final _OQS_SIG_STFL_SECRET_KEY_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>(
      'OQS_SIG_STFL_SECRET_KEY_free');
  late final _OQS_SIG_STFL_SECRET_KEY_free = _OQS_SIG_STFL_SECRET_KEY_freePtr
      .asFunction<void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Attach a locking mechanism to a secret key object.
  ///
  /// This allows for proper synchronization in a multi-threaded or multi-process environment,
  /// by ensuring that a secret key is not used concurrently by multiple entities, which could otherwise lead to security issues.
  ///
  /// @param[in] sk Pointer to the secret key object whose lock function is to be set.
  /// @param[in] lock Function pointer to the locking routine provided by the application.
  ///
  /// @note It's not required to set the lock and unlock functions in a single-threaded environment.
  ///
  /// @note Once the `lock` function is set, users must also set the `mutex` and `unlock` functions.
  ///
  /// @note By default, the internal value of `sk->lock` is NULL, which does nothing to lock the private key.
  void OQS_SIG_STFL_SECRET_KEY_SET_lock(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
    lock_key lock,
  ) {
    return _OQS_SIG_STFL_SECRET_KEY_SET_lock(
      sk,
      lock,
    );
  }

  late final _OQS_SIG_STFL_SECRET_KEY_SET_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>,
              lock_key)>>('OQS_SIG_STFL_SECRET_KEY_SET_lock');
  late final _OQS_SIG_STFL_SECRET_KEY_SET_lock =
      _OQS_SIG_STFL_SECRET_KEY_SET_lockPtr.asFunction<
          void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>, lock_key)>();

  /// Attach an unlock mechanism to a secret key object.
  ///
  /// This allows for proper synchronization in a multi-threaded or multi-process environment,
  /// by ensuring that a secret key is not used concurrently by multiple entities, which could otherwise lead to security issues.
  ///
  /// @param[in] sk Pointer to the secret key object whose unlock function is to be set.
  /// @param[in] unlock Function pointer to the unlock routine provided by the application.
  ///
  /// @note It's not required to set the lock and unlock functions in a single-threaded environment.
  ///
  /// @note Once the `unlock` function is set, users must also set the `mutex` and `lock` functions.
  ///
  /// @note By default, the internal value of `sk->unlock` is NULL, which does nothing to unlock the private key.
  void OQS_SIG_STFL_SECRET_KEY_SET_unlock(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
    unlock_key unlock,
  ) {
    return _OQS_SIG_STFL_SECRET_KEY_SET_unlock(
      sk,
      unlock,
    );
  }

  late final _OQS_SIG_STFL_SECRET_KEY_SET_unlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>,
              unlock_key)>>('OQS_SIG_STFL_SECRET_KEY_SET_unlock');
  late final _OQS_SIG_STFL_SECRET_KEY_SET_unlock =
      _OQS_SIG_STFL_SECRET_KEY_SET_unlockPtr.asFunction<
          void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>, unlock_key)>();

  /// Assign a mutex function to handle concurrency control over the secret key.
  ///
  /// This is to ensure that only one process can access or modify the key at any given time.
  ///
  /// @param[in] sk A pointer to the secret key that the mutex functionality will protect.
  /// @param[in] mutex A function pointer to the desired concurrency control mechanism.
  ///
  /// @note It's not required to set the lock and unlock functions in a single-threaded environment.
  ///
  /// @note By default, the internal value of `sk->mutex` is NULL, it must be set to be used in `lock` or `unlock` the private key.
  void OQS_SIG_STFL_SECRET_KEY_SET_mutex(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
    ffi.Pointer<ffi.Void> mutex,
  ) {
    return _OQS_SIG_STFL_SECRET_KEY_SET_mutex(
      sk,
      mutex,
    );
  }

  late final _OQS_SIG_STFL_SECRET_KEY_SET_mutexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>,
              ffi.Pointer<ffi.Void>)>>('OQS_SIG_STFL_SECRET_KEY_SET_mutex');
  late final _OQS_SIG_STFL_SECRET_KEY_SET_mutex =
      _OQS_SIG_STFL_SECRET_KEY_SET_mutexPtr.asFunction<
          void Function(
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>, ffi.Pointer<ffi.Void>)>();

  /// Lock the secret key to ensure exclusive access in a concurrent environment.
  ///
  /// If the `mutex` is not set, this lock operation will fail.
  /// This lock operation is essential in multi-threaded or multi-process contexts
  /// to prevent simultaneous Signing operations that could compromise the stateful signature security.
  ///
  /// @warning If the `lock` function is set and `mutex` is not set, this lock operation will fail.
  ///
  /// @param[in] sk Pointer to the secret key to be locked.
  /// @return OQS_SUCCESS if the lock is successfully applied; OQS_ERROR otherwise.
  ///
  /// @note It's not necessary to use this function in either Keygen or Verifying operations.
  /// In a concurrent environment, the user is responsible for locking and unlocking the private key,
  /// to make sure that only one thread can access the private key during a Signing operation.
  ///
  /// @note If the `lock` function and `mutex` are both set, proceed to lock the private key.
  OQS_STATUS OQS_SIG_STFL_SECRET_KEY_lock(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_SECRET_KEY_lock(
      sk,
    ));
  }

  late final _OQS_SIG_STFL_SECRET_KEY_lockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>(
      'OQS_SIG_STFL_SECRET_KEY_lock');
  late final _OQS_SIG_STFL_SECRET_KEY_lock = _OQS_SIG_STFL_SECRET_KEY_lockPtr
      .asFunction<int Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Unlock the secret key, making it accessible to other processes.
  ///
  /// This function is crucial in environments where multiple processes need to coordinate access to
  /// the secret key, as it allows a process to signal that it has finished using the key, so
  /// others can safely use it.
  ///
  /// @warning If the `unlock` function is set and `mutex` is not set, this unlock operation will fail.
  ///
  /// @param[in] sk Pointer to the secret key whose lock should be released.
  /// @return OQS_SUCCESS if the lock was successfully released; otherwise, OQS_ERROR.
  ///
  /// @note It's not necessary to use this function in either Keygen or Verifying operations.
  /// In a concurrent environment, the user is responsible for locking and unlocking the private key,
  /// to make sure that only one thread can access the private key during a Signing operation.
  ///
  /// @note If the `unlock` function and `mutex` are both set, proceed to unlock the private key.
  OQS_STATUS OQS_SIG_STFL_SECRET_KEY_unlock(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_SECRET_KEY_unlock(
      sk,
    ));
  }

  late final _OQS_SIG_STFL_SECRET_KEY_unlockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>(
      'OQS_SIG_STFL_SECRET_KEY_unlock');
  late final _OQS_SIG_STFL_SECRET_KEY_unlock =
      _OQS_SIG_STFL_SECRET_KEY_unlockPtr.asFunction<
          int Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Set the callback and context for securely storing a stateful secret key.
  ///
  /// This function is designed to be called after a new stateful secret key
  /// has been generated. It enables the library to securely store secret key
  /// and update it every time a Signing operation occurs.
  /// Without properly setting this callback and context, signature generation
  /// will not succeed as the updated state of the secret key cannot be preserved.
  ///
  /// @param[in] sk Pointer to the stateful secret key to be managed.
  /// @param[in] store_cb Callback function that handles the secure storage of the key.
  /// @param[in] context Application-specific context that assists in the storage of secret key data.
  /// This context is managed by the application, which allocates it, keeps track of it,
  /// and deallocates it as necessary.
  void OQS_SIG_STFL_SECRET_KEY_SET_store_cb(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
    secure_store_sk store_cb,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _OQS_SIG_STFL_SECRET_KEY_SET_store_cb(
      sk,
      store_cb,
      context,
    );
  }

  late final _OQS_SIG_STFL_SECRET_KEY_SET_store_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>,
              secure_store_sk,
              ffi.Pointer<ffi.Void>)>>('OQS_SIG_STFL_SECRET_KEY_SET_store_cb');
  late final _OQS_SIG_STFL_SECRET_KEY_SET_store_cb =
      _OQS_SIG_STFL_SECRET_KEY_SET_store_cbPtr.asFunction<
          void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>, secure_store_sk,
              ffi.Pointer<ffi.Void>)>();

  /// Serialize the stateful secret key data into a byte array.
  ///
  /// Converts an OQS_SIG_STFL_SECRET_KEY object into a byte array for storage or transmission.
  ///
  /// @param[out] sk_buf_ptr Pointer to the allocated byte array containing the serialized key.
  /// @param[out] sk_buf_len Length of the serialized key byte array.
  /// @param[in] sk Pointer to the OQS_SIG_STFL_SECRET_KEY object to be serialized.
  /// @return OQS_SUCCESS on success, or an OQS error code on failure.
  ///
  /// @note The function allocates memory for the byte array, and it is the caller's responsibility to free this memory after use.
  OQS_STATUS OQS_SIG_STFL_SECRET_KEY_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> sk_buf_ptr,
    ffi.Pointer<ffi.Size> sk_buf_len,
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_SECRET_KEY_serialize(
      sk_buf_ptr,
      sk_buf_len,
      sk,
    ));
  }

  late final _OQS_SIG_STFL_SECRET_KEY_serializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>>(
      'OQS_SIG_STFL_SECRET_KEY_serialize');
  late final _OQS_SIG_STFL_SECRET_KEY_serialize =
      _OQS_SIG_STFL_SECRET_KEY_serializePtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>)>();

  /// Deserialize a byte array into an OQS_SIG_STFL_SECRET_KEY object.
  ///
  /// Transforms a binary representation of a secret key into an OQS_SIG_STFL_SECRET_KEY structure.
  /// After deserialization, the secret key object can be used for subsequent cryptographic operations.
  ///
  /// @param[out] sk A pointer to the secret key object that will be populated from the binary data.
  /// @param[in] sk_buf The buffer containing the serialized secret key data.
  /// @param[in] sk_buf_len The length of the binary secret key data in bytes.
  /// @param[in] context Application-specific data used to maintain context about the secret key.
  /// @return OQS_SUCCESS if deserialization was successful; otherwise, OQS_ERROR.
  ///
  /// @attention The caller is responsible for freeing the `sk_buf` memory when it is no longer needed.
  OQS_STATUS OQS_SIG_STFL_SECRET_KEY_deserialize(
    ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
    ffi.Pointer<ffi.Uint8> sk_buf,
    int sk_buf_len,
    ffi.Pointer<ffi.Void> context,
  ) {
    return OQS_STATUS.fromValue(_OQS_SIG_STFL_SECRET_KEY_deserialize(
      sk,
      sk_buf,
      sk_buf_len,
      context,
    ));
  }

  late final _OQS_SIG_STFL_SECRET_KEY_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Void>)>>('OQS_SIG_STFL_SECRET_KEY_deserialize');
  late final _OQS_SIG_STFL_SECRET_KEY_deserialize =
      _OQS_SIG_STFL_SECRET_KEY_deserializePtr.asFunction<
          int Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Void>)>();

  /// Set callback functions for AES operations.
  ///
  /// This function may be called before OQS_init to switch the
  /// cryptographic provider for AES operations. If it is not called, the
  /// default provider determined at build time will be used.
  ///
  /// @param[in] new_callbacks Callback functions defined in OQS_AES_callbacks
  void OQS_AES_set_callbacks(
    ffi.Pointer<OQS_AES_callbacks> new_callbacks,
  ) {
    return _OQS_AES_set_callbacks(
      new_callbacks,
    );
  }

  late final _OQS_AES_set_callbacksPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OQS_AES_callbacks>)>>(
      'OQS_AES_set_callbacks');
  late final _OQS_AES_set_callbacks = _OQS_AES_set_callbacksPtr.asFunction<
      void Function(ffi.Pointer<OQS_AES_callbacks>)>();

  /// Set callback functions for SHA2 operations.
  ///
  /// This function may be called before OQS_init to switch the
  /// cryptographic provider for SHA2 operations. If it is not called,
  /// the default provider determined at build time will be used.
  ///
  /// @param[in] new_callbacks Callback functions defined in OQS_SHA2_callbacks
  void OQS_SHA2_set_callbacks(
    ffi.Pointer<OQS_SHA2_callbacks> new_callbacks,
  ) {
    return _OQS_SHA2_set_callbacks(
      new_callbacks,
    );
  }

  late final _OQS_SHA2_set_callbacksPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OQS_SHA2_callbacks>)>>(
      'OQS_SHA2_set_callbacks');
  late final _OQS_SHA2_set_callbacks = _OQS_SHA2_set_callbacksPtr.asFunction<
      void Function(ffi.Pointer<OQS_SHA2_callbacks>)>();

  /// Set callback functions for SHA3 operations.
  ///
  /// This function may be called before OQS_init to switch the
  /// cryptographic provider for SHA3 operations. If it is not called,
  /// the default provider determined at build time will be used.
  ///
  /// @param new_callbacks Callback functions defined in OQS_SHA3_callbacks struct
  void OQS_SHA3_set_callbacks(
    ffi.Pointer<OQS_SHA3_callbacks> new_callbacks,
  ) {
    return _OQS_SHA3_set_callbacks(
      new_callbacks,
    );
  }

  late final _OQS_SHA3_set_callbacksPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OQS_SHA3_callbacks>)>>(
      'OQS_SHA3_set_callbacks');
  late final _OQS_SHA3_set_callbacks = _OQS_SHA3_set_callbacksPtr.asFunction<
      void Function(ffi.Pointer<OQS_SHA3_callbacks>)>();

  /// Set callback functions for 4-parallel SHA3 operations.
  ///
  /// This function may be called before OQS_init to switch the
  /// cryptographic provider for 4-parallel SHA3 operations. If it is not
  /// called, the default provider determined at build time will be used.
  ///
  /// @param new_callbacks Callback functions defined in OQS_SHA3_x4_callbacks struct
  void OQS_SHA3_x4_set_callbacks(
    ffi.Pointer<OQS_SHA3_x4_callbacks> new_callbacks,
  ) {
    return _OQS_SHA3_x4_set_callbacks(
      new_callbacks,
    );
  }

  late final _OQS_SHA3_x4_set_callbacksPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_x4_callbacks>)>>(
      'OQS_SHA3_x4_set_callbacks');
  late final _OQS_SHA3_x4_set_callbacks = _OQS_SHA3_x4_set_callbacksPtr
      .asFunction<void Function(ffi.Pointer<OQS_SHA3_x4_callbacks>)>();
}

/// Represents return values from functions.
///
/// Callers should compare with the symbol rather than the individual value.
/// For example,
///
/// ret = OQS_KEM_encaps(...);
/// if (ret == OQS_SUCCESS) { ... }
///
/// rather than
///
/// if (!OQS_KEM_encaps(...) { ... }
enum OQS_STATUS {
  /// Used to indicate that some undefined error occurred.
  OQS_ERROR(-1),

  /// Used to indicate successful return from function.
  OQS_SUCCESS(0),

  /// Used to indicate failures in external libraries (e.g., OpenSSL).
  OQS_EXTERNAL_LIB_ERROR_OPENSSL(50);

  final int value;
  const OQS_STATUS(this.value);

  static OQS_STATUS fromValue(int value) => switch (value) {
        -1 => OQS_ERROR,
        0 => OQS_SUCCESS,
        50 => OQS_EXTERNAL_LIB_ERROR_OPENSSL,
        _ => throw ArgumentError('Unknown value for OQS_STATUS: $value'),
      };
}

/// CPU runtime detection flags
enum OQS_CPU_EXT {
  OQS_CPU_EXT_INIT(0),
  OQS_CPU_EXT_ADX(1),
  OQS_CPU_EXT_AES(2),
  OQS_CPU_EXT_AVX(3),
  OQS_CPU_EXT_AVX2(4),
  OQS_CPU_EXT_AVX512(5),
  OQS_CPU_EXT_BMI1(6),
  OQS_CPU_EXT_BMI2(7),
  OQS_CPU_EXT_PCLMULQDQ(8),
  OQS_CPU_EXT_VPCLMULQDQ(9),
  OQS_CPU_EXT_POPCNT(10),
  OQS_CPU_EXT_SSE(11),
  OQS_CPU_EXT_SSE2(12),
  OQS_CPU_EXT_SSE3(13),
  OQS_CPU_EXT_ARM_AES(14),
  OQS_CPU_EXT_ARM_SHA2(15),
  OQS_CPU_EXT_ARM_SHA3(16),
  OQS_CPU_EXT_ARM_NEON(17),
  OQS_CPU_EXT_COUNT(18);

  final int value;
  const OQS_CPU_EXT(this.value);

  static OQS_CPU_EXT fromValue(int value) => switch (value) {
        0 => OQS_CPU_EXT_INIT,
        1 => OQS_CPU_EXT_ADX,
        2 => OQS_CPU_EXT_AES,
        3 => OQS_CPU_EXT_AVX,
        4 => OQS_CPU_EXT_AVX2,
        5 => OQS_CPU_EXT_AVX512,
        6 => OQS_CPU_EXT_BMI1,
        7 => OQS_CPU_EXT_BMI2,
        8 => OQS_CPU_EXT_PCLMULQDQ,
        9 => OQS_CPU_EXT_VPCLMULQDQ,
        10 => OQS_CPU_EXT_POPCNT,
        11 => OQS_CPU_EXT_SSE,
        12 => OQS_CPU_EXT_SSE2,
        13 => OQS_CPU_EXT_SSE3,
        14 => OQS_CPU_EXT_ARM_AES,
        15 => OQS_CPU_EXT_ARM_SHA2,
        16 => OQS_CPU_EXT_ARM_SHA3,
        17 => OQS_CPU_EXT_ARM_NEON,
        18 => OQS_CPU_EXT_COUNT,
        _ => throw ArgumentError('Unknown value for OQS_CPU_EXT: $value'),
      };
}

/// Key encapsulation mechanism object
final class OQS_KEM extends ffi.Struct {
  /// Printable string representing the name of the key encapsulation mechanism.
  external ffi.Pointer<ffi.Char> method_name;

  /// Printable string representing the version of the cryptographic algorithm.
  ///
  /// Implementations with the same method_name and same alg_version will be interoperable.
  /// See README.md for information about algorithm compatibility.
  external ffi.Pointer<ffi.Char> alg_version;

  /// The NIST security level (1, 2, 3, 4, 5) claimed in this algorithm's original NIST submission.
  @ffi.Uint8()
  external int claimed_nist_level;

  /// Whether the KEM offers IND-CCA security (TRUE) or IND-CPA security (FALSE).
  @ffi.Bool()
  external bool ind_cca;

  /// The length, in bytes, of public keys for this KEM.
  @ffi.Size()
  external int length_public_key;

  /// The length, in bytes, of secret keys for this KEM.
  @ffi.Size()
  external int length_secret_key;

  /// The length, in bytes, of ciphertexts for this KEM.
  @ffi.Size()
  external int length_ciphertext;

  /// The length, in bytes, of shared secrets for this KEM.
  @ffi.Size()
  external int length_shared_secret;

  /// The length, in bytes, of seeds for derandomized keypair generation for this KEM.
  @ffi.Size()
  external int length_keypair_seed;

  /// Derandomized keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` and
  /// `secret_key`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_KEM_*_length_*`.
  ///
  /// @param[out] public_key The public key represented as a byte string.
  /// @param[out] secret_key The secret key represented as a byte string.
  /// @param[in] seed The input randomness represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> public_key,
              ffi.Pointer<ffi.Uint8> secret_key,
              ffi.Pointer<ffi.Uint8> seed)>> keypair_derand;

  /// Keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` and
  /// `secret_key`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_KEM_*_length_*`.
  ///
  /// @param[out] public_key The public key represented as a byte string.
  /// @param[out] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8> public_key,
              ffi.Pointer<ffi.Uint8> secret_key)>> keypair;

  /// Encapsulation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `ciphertext` and
  /// `shared_secret`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_KEM_*_length_*`.
  ///
  /// @param[out] ciphertext The ciphertext (encapsulation) represented as a byte string.
  /// @param[out] shared_secret The shared secret represented as a byte string.
  /// @param[in] public_key The public key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> ciphertext,
              ffi.Pointer<ffi.Uint8> shared_secret,
              ffi.Pointer<ffi.Uint8> public_key)>> encaps;

  /// Decapsulation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `shared_secret`, based
  /// on the `length_*` members in this object or the per-scheme compile-time macros
  /// `OQS_KEM_*_length_*`.
  ///
  /// @param[out] shared_secret The shared secret represented as a byte string.
  /// @param[in] ciphertext The ciphertext (encapsulation) represented as a byte string.
  /// @param[in] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> shared_secret,
              ffi.Pointer<ffi.Uint8> ciphertext,
              ffi.Pointer<ffi.Uint8> secret_key)>> decaps;
}

/// Signature schemes object
final class OQS_SIG extends ffi.Struct {
  /// Printable string representing the name of the signature scheme.
  external ffi.Pointer<ffi.Char> method_name;

  /// Printable string representing the version of the cryptographic algorithm.
  ///
  /// Implementations with the same method_name and same alg_version will be interoperable.
  /// See README.md for information about algorithm compatibility.
  external ffi.Pointer<ffi.Char> alg_version;

  /// The NIST security level (1, 2, 3, 4, 5) claimed in this algorithm's original NIST submission.
  @ffi.Uint8()
  external int claimed_nist_level;

  /// Whether the signature offers EUF-CMA security (TRUE) or not (FALSE).
  @ffi.Bool()
  external bool euf_cma;

  /// Whether the signature offers SUF-CMA security (TRUE) or not (FALSE).
  @ffi.Bool()
  external bool suf_cma;

  /// Whether the signature supports signing with a context string (TRUE) or not (FALSE).
  @ffi.Bool()
  external bool sig_with_ctx_support;

  /// The length, in bytes, of public keys for this signature scheme.
  @ffi.Size()
  external int length_public_key;

  /// The length, in bytes, of secret keys for this signature scheme.
  @ffi.Size()
  external int length_secret_key;

  /// The (maximum) length, in bytes, of signatures for this signature scheme.
  @ffi.Size()
  external int length_signature;

  /// Keypair generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `public_key` and
  /// `secret_key`, based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_*_length_*`.
  ///
  /// @param[out] public_key The public key represented as a byte string.
  /// @param[out] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8> public_key,
              ffi.Pointer<ffi.Uint8> secret_key)>> keypair;

  /// Signature generation algorithm.
  ///
  /// Caller is responsible for allocating sufficient memory for `signature`,
  /// based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_*_length_*`.
  ///
  /// @param[out] signature The signature on the message represented as a byte string.
  /// @param[out] signature_len The actual length of the signature. May be smaller than `length_signature` for some algorithms since some algorithms have variable length signatures.
  /// @param[in] message The message to sign represented as a byte string.
  /// @param[in] message_len The length of the message to sign.
  /// @param[in] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> signature,
              ffi.Pointer<ffi.Size> signature_len,
              ffi.Pointer<ffi.Uint8> message,
              ffi.Size message_len,
              ffi.Pointer<ffi.Uint8> secret_key)>> sign;

  /// Signature generation algorithm, with custom context string.
  ///
  /// Caller is responsible for allocating sufficient memory for `signature`,
  /// based on the `length_*` members in this object or the per-scheme
  /// compile-time macros `OQS_SIG_*_length_*`.
  ///
  /// @param[out] signature The signature on the message represented as a byte string.
  /// @param[out] signature_len The actual length of the signature. May be smaller than `length_signature` for some algorithms since some algorithms have variable length signatures.
  /// @param[in] message The message to sign represented as a byte string.
  /// @param[in] message_len The length of the message to sign.
  /// @param[in] ctx_str The context string used for the signature. This value can be set to NULL if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] ctx_str_len The context string used for the signature. This value can be set to 0 if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] secret_key The secret key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> signature,
              ffi.Pointer<ffi.Size> signature_len,
              ffi.Pointer<ffi.Uint8> message,
              ffi.Size message_len,
              ffi.Pointer<ffi.Uint8> ctx_str,
              ffi.Size ctx_str_len,
              ffi.Pointer<ffi.Uint8> secret_key)>> sign_with_ctx_str;

  /// Signature verification algorithm.
  ///
  /// @param[in] message The message represented as a byte string.
  /// @param[in] message_len The length of the message.
  /// @param[in] signature The signature on the message represented as a byte string.
  /// @param[in] signature_len The length of the signature.
  /// @param[in] public_key The public key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> message,
              ffi.Size message_len,
              ffi.Pointer<ffi.Uint8> signature,
              ffi.Size signature_len,
              ffi.Pointer<ffi.Uint8> public_key)>> verify;

  /// Signature verification algorithm, with custom context string.
  ///
  /// @param[in] message The message represented as a byte string.
  /// @param[in] message_len The length of the message.
  /// @param[in] signature The signature on the message represented as a byte string.
  /// @param[in] signature_len The length of the signature.
  /// @param[in] ctx_str The context string for the signature. This value can be set to NULL if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] ctx_str_len The length of the context string. This value can be set to 0 if a context string is not needed (i.e., for algorithms that do not support context strings or if an empty context string is used).
  /// @param[in] public_key The public key represented as a byte string.
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8> message,
              ffi.Size message_len,
              ffi.Pointer<ffi.Uint8> signature,
              ffi.Size signature_len,
              ffi.Pointer<ffi.Uint8> ctx_str,
              ffi.Size ctx_str_len,
              ffi.Pointer<ffi.Uint8> public_key)>> verify_with_ctx_str;
}

typedef secure_store_skFunction = ffi.Int Function(
    ffi.Pointer<ffi.Uint8> sk_buf,
    ffi.Size buf_len,
    ffi.Pointer<ffi.Void> context);
typedef Dartsecure_store_skFunction = OQS_STATUS Function(
    ffi.Pointer<ffi.Uint8> sk_buf, int buf_len, ffi.Pointer<ffi.Void> context);

/// Application provided function to securely store data
/// @param[in] sk_buf pointer to the data to be saved
/// @param[in] buf_len length of the data to be stored
/// @param[out] context pass back application data related to secret key data storage.
/// return OQS_SUCCESS if successful, otherwise OQS_ERROR
typedef secure_store_sk
    = ffi.Pointer<ffi.NativeFunction<secure_store_skFunction>>;

/// @brief OQS_SIG_STFL_SECRET_KEY object for stateful signature schemes
final class OQS_SIG_STFL_SECRET_KEY extends ffi.Struct {
  /// The (maximum) length, in bytes, of secret keys for this signature scheme.
  @ffi.Size()
  external int length_secret_key;

  /// The variant-specific secret key data must be allocated at the initialization.
  external ffi.Pointer<ffi.Void> secret_key_data;

  /// The mutual exclusion struct
  external ffi.Pointer<ffi.Void> mutex;

  /// Application-managed data related to secure storage of secret key data
  external ffi.Pointer<ffi.Void> context;

  /// Serialize the stateful secret key.
  ///
  /// This function encodes the stateful secret key represented by `sk` into a byte stream
  /// for storage or transfer. The `sk_buf_ptr` will point to the allocated memory containing
  /// the byte stream. Users must free the `sk_buf_ptr` using `OQS_MEM_secure_free` after use.
  /// The `sk_len` will contain the length of the byte stream.
  ///
  /// @param[out] sk_buf_ptr Pointer to the byte stream representing the serialized secret key.
  /// @param[out] sk_buf_len Pointer to the length of the serialized byte stream.
  /// @param[in] sk Pointer to the `OQS_SIG_STFL_SECRET_KEY` object to serialize.
  /// @return The number of bytes in the serialized byte stream upon success, or an OQS error code on failure.
  ///
  /// @attention The caller is responsible for ensuring that `sk` is a valid object before calling this function.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>> sk_buf_ptr,
              ffi.Pointer<ffi.Size> sk_buf_len,
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk)>> serialize_key;

  /// Deserialize a byte stream into the internal representation of a stateful secret key.
  ///
  /// This function takes a series of bytes representing a stateful secret key and initializes
  /// the internal `OQS_SIG_STFL_SECRET_KEY` object with the key material. This is particularly
  /// useful for reconstructing key objects from persisted or transmitted state.
  ///
  /// @param[out] sk Pointer to an uninitialized `OQS_SIG_STFL_SECRET_KEY` object to hold the secret key.
  /// @param[in] sk_buf Pointer to the byte stream containing the serialized secret key data.
  /// @param[in] sk_buf_len The length of the secret key byte stream.
  /// @param[in] context Pointer to application-specific data, handled externally, associated with the key.
  /// @returns OQS_SUCCESS if the deserialization succeeds, with the `sk` object populated with the key material.
  ///
  /// @attention The caller is responsible for ensuring that `sk_buf` is securely deallocated when it's no longer needed.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
              ffi.Pointer<ffi.Uint8> sk_buf,
              ffi.Size sk_buf_len,
              ffi.Pointer<ffi.Void> context)>> deserialize_key;

  /// Secret Key Locking Function
  ///
  /// @param[in] mutex application defined mutex
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> mutex)>>
      lock_key;

  /// Secret Key Unlocking / Releasing Function
  ///
  /// @param[in]  mutex application defined mutex
  /// @return OQS_SUCCESS or OQS_ERROR
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> mutex)>>
      unlock_key;

  /// Store Secret Key Function
  ///
  /// Callback function used to securely store key data after a signature generation.
  /// When populated, this pointer points to the application-supplied secure storage function.
  /// @param[in] sk_buf The serialized secret key data to secure store
  /// @param[in] sk_buf_len length of data to secure
  /// @param[in] context application supplied data used to locate where this secret key
  /// is stored (passed in at the time the function pointer was set).
  ///
  /// @return OQS_SUCCESS or OQS_ERROR
  /// Ideally written to a secure device.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8> sk_buf, ffi.Size sk_buf_len,
              ffi.Pointer<ffi.Void> context)>> secure_store_scrt_key;

  /// Free internal variant-specific data
  ///
  /// @param[in] sk The secret key represented as OQS_SIG_STFL_SECRET_KEY object.
  /// @return None.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk)>> free_key;

  /// Set Secret Key Store Callback Function
  ///
  /// This function is used to establish a callback mechanism for secure storage
  /// of private keys involved in stateful signature Signing operation. The secure storage
  /// and the management of private keys is the responsibility of the adopting application.
  /// Therefore, before invoking stateful signature generation, a callback function and
  /// associated context data must be provided by the application to manage the storage.
  ///
  /// The `context` argument is designed to hold information requisite for private key storage,
  /// such as a hardware security module (HSM) context, a file path, or other relevant data.
  /// This context is passed to the libOQS when the callback function is registered.
  ///
  /// @param[in] sk A pointer to the secret key object that requires secure storage management
  /// after signature Signing operations.
  /// @param[in] store_cb A pointer to the callback function provided by the application
  /// for storing and updating the private key securely.
  /// @param[in] context Application-specific context information for the private key storage,
  /// furnished when setting the callback function via
  /// OQS_SIG_STFL_SECRET_KEY_set_store_cb().
  /// @return None.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SIG_STFL_SECRET_KEY> sk,
              secure_store_sk store_cb,
              ffi.Pointer<ffi.Void> context)>> set_scrt_key_store_cb;
}

typedef lock_keyFunction = ffi.Int Function(ffi.Pointer<ffi.Void> mutex);
typedef Dartlock_keyFunction = OQS_STATUS Function(ffi.Pointer<ffi.Void> mutex);

/// Application provided function to lock secret key object serialize access
/// @param[in] mutex pointer to mutex struct
/// return OQS_SUCCESS if successful, otherwise OQS_ERROR
typedef lock_key = ffi.Pointer<ffi.NativeFunction<lock_keyFunction>>;
typedef unlock_keyFunction = ffi.Int Function(ffi.Pointer<ffi.Void> mutex);
typedef Dartunlock_keyFunction = OQS_STATUS Function(
    ffi.Pointer<ffi.Void> mutex);

/// Application provided function to unlock secret key object
/// @param[in] mutex pointer to mutex struct
/// return OQS_SUCCESS if successful, otherwise OQS_ERROR
typedef unlock_key = ffi.Pointer<ffi.NativeFunction<unlock_keyFunction>>;

/// Data structure implemented by cryptographic provider for AES operations.
final class OQS_AES_callbacks extends ffi.Struct {
  /// Implementation of function OQS_AES128_ECB_load_schedule.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> key,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ctx)>>
      AES128_ECB_load_schedule;

  /// Implementation of function OQS_AES256_CTR_inc_init.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> key,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ctx)>> AES128_CTR_inc_init;

  /// Implementation of function OQS_AES256_CTR_inc_iv.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> iv, ffi.Size iv_len,
              ffi.Pointer<ffi.Void> ctx)>> AES128_CTR_inc_iv;

  /// Implementation of function OQS_AES256_CTR_inc_ivu64.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Uint64 iv, ffi.Pointer<ffi.Void> ctx)>>
      AES128_CTR_inc_ivu64;

  /// Implementation of function OQS_AES128_free_schedule.
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>>
      AES128_free_schedule;

  /// Implementation of function OQS_AES128_ECB_enc.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> plaintext,
              ffi.Size plaintext_len,
              ffi.Pointer<ffi.Uint8> key,
              ffi.Pointer<ffi.Uint8> ciphertext)>> AES128_ECB_enc;

  /// Implementation of function OQS_AES128_ECB_enc_sch.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> plaintext,
              ffi.Size plaintext_len,
              ffi.Pointer<ffi.Void> schedule,
              ffi.Pointer<ffi.Uint8> ciphertext)>> AES128_ECB_enc_sch;

  /// Implementation of function OQS_AES128_CTR_inc_stream_iv.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> iv,
              ffi.Size iv_len,
              ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Uint8> out,
              ffi.Size out_len)>> AES128_CTR_inc_stream_iv;

  /// Implementation of function OQS_AES256_ECB_load_schedule.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> key,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ctx)>>
      AES256_ECB_load_schedule;

  /// Implementation of function OQS_AES256_CTR_inc_init.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> key,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ctx)>> AES256_CTR_inc_init;

  /// Implementation of function OQS_AES256_CTR_inc_iv.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> iv, ffi.Size iv_len,
              ffi.Pointer<ffi.Void> ctx)>> AES256_CTR_inc_iv;

  /// Implementation of function OQS_AES256_CTR_inc_ivu64.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Uint64 iv, ffi.Pointer<ffi.Void> ctx)>>
      AES256_CTR_inc_ivu64;

  /// Implementation of function OQS_AES256_free_schedule.
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>>
      AES256_free_schedule;

  /// Implementation of function OQS_AES256_ECB_enc.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> plaintext,
              ffi.Size plaintext_len,
              ffi.Pointer<ffi.Uint8> key,
              ffi.Pointer<ffi.Uint8> ciphertext)>> AES256_ECB_enc;

  /// Implementation of function OQS_AES256_ECB_enc_sch.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> plaintext,
              ffi.Size plaintext_len,
              ffi.Pointer<ffi.Void> schedule,
              ffi.Pointer<ffi.Uint8> ciphertext)>> AES256_ECB_enc_sch;

  /// Implementation of function OQS_AES256_CTR_inc_stream_iv.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> iv,
              ffi.Size iv_len,
              ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Uint8> out,
              ffi.Size out_len)>> AES256_CTR_inc_stream_iv;

  /// Implementation of function OQS_AES256_CTR_inc_stream_blks.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Uint8> out,
              ffi.Size out_blks)>> AES256_CTR_inc_stream_blks;
}

/// Data structure for the state of the SHA-224 incremental hashing API.
final class OQS_SHA2_sha224_ctx extends ffi.Struct {
  /// Internal state
  external ffi.Pointer<ffi.Void> ctx;

  /// current number of bytes in data
  @ffi.Size()
  external int data_len;

  /// unprocessed data buffer
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> data;
}

/// Data structure for the state of the SHA-256 incremental hashing API.
final class OQS_SHA2_sha256_ctx extends ffi.Struct {
  /// Internal state
  external ffi.Pointer<ffi.Void> ctx;

  /// current number of bytes in data
  @ffi.Size()
  external int data_len;

  /// unprocessed data buffer
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> data;
}

/// Data structure for the state of the SHA-384 incremental hashing API.
final class OQS_SHA2_sha384_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;

  /// current number of bytes in data
  @ffi.Size()
  external int data_len;

  /// unprocessed data buffer
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> data;
}

/// Data structure for the state of the SHA-512 incremental hashing API.
final class OQS_SHA2_sha512_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;

  /// current number of bytes in data
  @ffi.Size()
  external int data_len;

  /// unprocessed data buffer
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> data;
}

/// Data structure implemented by cryptographic provider for SHA-2 operations.
final class OQS_SHA2_callbacks extends ffi.Struct {
  /// Implementation of function OQS_SHA2_sha256.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA2_sha256;

  /// Implementation of function OQS_SHA2_sha256_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA2_sha256_ctx> state)>>
      SHA2_sha256_inc_init;

  /// Implementation of function OQS_SHA2_sha256_inc_ctx_clone.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SHA2_sha256_ctx> dest,
              ffi.Pointer<OQS_SHA2_sha256_ctx> src)>> SHA2_sha256_inc_ctx_clone;

  /// Implementation of function OQS_SHA2_sha256_inc.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SHA2_sha256_ctx> state,
              ffi.Pointer<ffi.Uint8> in$, ffi.Size len)>> SHA2_sha256_inc;

  /// Implementation of function OQS_SHA2_sha256_inc_blocks.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA2_sha256_ctx> state,
              ffi.Pointer<ffi.Uint8> in$,
              ffi.Size inblocks)>> SHA2_sha256_inc_blocks;

  /// Implementation of function OQS_SHA2_sha256_inc_finalize.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> out,
              ffi.Pointer<OQS_SHA2_sha256_ctx> state,
              ffi.Pointer<ffi.Uint8> in$,
              ffi.Size inlen)>> SHA2_sha256_inc_finalize;

  /// Implementation of function OQS_SHA2_sha256_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA2_sha256_ctx> state)>>
      SHA2_sha256_inc_ctx_release;

  /// Implementation of function OQS_SHA2_sha384.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA2_sha384;

  /// Implementation of function OQS_SHA2_sha384_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA2_sha384_ctx> state)>>
      SHA2_sha384_inc_init;

  /// Implementation of function OQS_SHA2_sha384_inc_ctx_clone.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SHA2_sha384_ctx> dest,
              ffi.Pointer<OQS_SHA2_sha384_ctx> src)>> SHA2_sha384_inc_ctx_clone;

  /// Implementation of function OQS_SHA2_sha384_inc_blocks.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA2_sha384_ctx> state,
              ffi.Pointer<ffi.Uint8> in$,
              ffi.Size inblocks)>> SHA2_sha384_inc_blocks;

  /// Implementation of function OQS_SHA2_sha384_inc_finalize.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> out,
              ffi.Pointer<OQS_SHA2_sha384_ctx> state,
              ffi.Pointer<ffi.Uint8> in$,
              ffi.Size inlen)>> SHA2_sha384_inc_finalize;

  /// Implementation of function OQS_SHA2_sha384_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA2_sha384_ctx> state)>>
      SHA2_sha384_inc_ctx_release;

  /// Implementation of function OQS_SHA2_sha512.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA2_sha512;

  /// Implementation of function OQS_SHA2_sha512_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA2_sha512_ctx> state)>>
      SHA2_sha512_inc_init;

  /// Implementation of function OQS_SHA2_sha512_inc_ctx_clone.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OQS_SHA2_sha512_ctx> dest,
              ffi.Pointer<OQS_SHA2_sha512_ctx> src)>> SHA2_sha512_inc_ctx_clone;

  /// Implementation of function OQS_SHA2_sha512_inc_blocks.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA2_sha512_ctx> state,
              ffi.Pointer<ffi.Uint8> in$,
              ffi.Size inblocks)>> SHA2_sha512_inc_blocks;

  /// Implementation of function OQS_SHA2_sha512_inc_finalize.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> out,
              ffi.Pointer<OQS_SHA2_sha512_ctx> state,
              ffi.Pointer<ffi.Uint8> in$,
              ffi.Size inlen)>> SHA2_sha512_inc_finalize;

  /// Implementation of function OQS_SHA2_sha512_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA2_sha512_ctx> state)>>
      SHA2_sha512_inc_ctx_release;
}

/// Data structure for the state of the incremental SHA3-256 API.
final class OQS_SHA3_sha3_256_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure for the state of the incremental SHA3-384 API.
final class OQS_SHA3_sha3_384_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure for the state of the incremental SHA3-512 API.
final class OQS_SHA3_sha3_512_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure for the state of the incremental SHAKE-128 API.
final class OQS_SHA3_shake128_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure for the state of the incremental SHAKE-256 API.
final class OQS_SHA3_shake256_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure implemented by cryptographic provider for SHA-3 operations.
final class OQS_SHA3_callbacks extends ffi.Struct {
  /// Implementation of function OQS_SHA3_sha3_256.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA3_sha3_256;

  /// Implementation of function OQS_SHA3_sha3_256_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> state)>>
      SHA3_sha3_256_inc_init;

  /// Implementation of function OQS_SHA3_sha3_256_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> input,
              ffi.Size inlen)>> SHA3_sha3_256_inc_absorb;

  /// Implementation of function OQS_SHA3_sha3_256_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
                  ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> state)>>
      SHA3_sha3_256_inc_finalize;

  /// Implementation of function OQS_SHA3_sha3_256_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> state)>>
      SHA3_sha3_256_inc_ctx_release;

  /// Implementation of function OQS_SHA3_sha3_256_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> state)>>
      SHA3_sha3_256_inc_ctx_reset;

  /// Implementation of function OQS_SHA3_sha3_256_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_sha3_256_inc_ctx> src)>>
      SHA3_sha3_256_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_sha3_384.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA3_sha3_384;

  /// Implementation of function OQS_SHA3_sha3_384_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> state)>>
      SHA3_sha3_384_inc_init;

  /// Implementation of function OQS_SHA3_sha3_384_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> input,
              ffi.Size inlen)>> SHA3_sha3_384_inc_absorb;

  /// Implementation of function OQS_SHA3_sha3_384_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
                  ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> state)>>
      SHA3_sha3_384_inc_finalize;

  /// Implementation of function OQS_SHA3_sha3_384_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> state)>>
      SHA3_sha3_384_inc_ctx_release;

  /// Implementation of function OQS_SHA3_sha3_384_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> state)>>
      SHA3_sha3_384_inc_ctx_reset;

  /// Implementation of function OQS_SHA3_sha3_384_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_sha3_384_inc_ctx> src)>>
      SHA3_sha3_384_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_sha3_512.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA3_sha3_512;

  /// Implementation of function OQS_SHA3_sha3_512_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> state)>>
      SHA3_sha3_512_inc_init;

  /// Implementation of function OQS_SHA3_sha3_512_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> input,
              ffi.Size inlen)>> SHA3_sha3_512_inc_absorb;

  /// Implementation of function OQS_SHA3_sha3_512_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> output,
                  ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> state)>>
      SHA3_sha3_512_inc_finalize;

  /// Implementation of function OQS_SHA3_sha3_512_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> state)>>
      SHA3_sha3_512_inc_ctx_release;

  /// Implementation of function OQS_SHA3_sha3_512_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> state)>>
      SHA3_sha3_512_inc_ctx_reset;

  /// Implementation of function OQS_SHA3_sha3_512_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_sha3_512_inc_ctx> src)>>
      SHA3_sha3_512_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_shake128.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output, ffi.Size outlen,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA3_shake128;

  /// Implementation of function OQS_SHA3_shake128_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake128_inc_ctx> state)>>
      SHA3_shake128_inc_init;

  /// Implementation of function OQS_SHA3_shake128_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_shake128_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> input,
              ffi.Size inlen)>> SHA3_shake128_inc_absorb;

  /// Implementation of function OQS_SHA3_shake128_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake128_inc_ctx> state)>>
      SHA3_shake128_inc_finalize;

  /// Implementation of function OQS_SHA3_shake128_inc_squeeze.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> output, ffi.Size outlen,
                  ffi.Pointer<OQS_SHA3_shake128_inc_ctx> state)>>
      SHA3_shake128_inc_squeeze;

  /// Implementation of function OQS_SHA3_shake128_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake128_inc_ctx> state)>>
      SHA3_shake128_inc_ctx_release;

  /// Implementation of function OQS_SHA3_shake128_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake128_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_shake128_inc_ctx> src)>>
      SHA3_shake128_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_shake128_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake128_inc_ctx> state)>>
      SHA3_shake128_inc_ctx_reset;

  /// Implementation of function OQS_SHA3_shake256.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8> output, ffi.Size outlen,
              ffi.Pointer<ffi.Uint8> input, ffi.Size inplen)>> SHA3_shake256;

  /// Implementation of function OQS_SHA3_shake256_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake256_inc_ctx> state)>>
      SHA3_shake256_inc_init;

  /// Implementation of function OQS_SHA3_shake256_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_shake256_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> input,
              ffi.Size inlen)>> SHA3_shake256_inc_absorb;

  /// Implementation of function OQS_SHA3_shake256_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake256_inc_ctx> state)>>
      SHA3_shake256_inc_finalize;

  /// Implementation of function OQS_SHA3_shake256_inc_squeeze.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Uint8> output, ffi.Size outlen,
                  ffi.Pointer<OQS_SHA3_shake256_inc_ctx> state)>>
      SHA3_shake256_inc_squeeze;

  /// Implementation of function OQS_SHA3_shake256_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake256_inc_ctx> state)>>
      SHA3_shake256_inc_ctx_release;

  /// Implementation of function OQS_SHA3_shake256_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake256_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_shake256_inc_ctx> src)>>
      SHA3_shake256_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_shake256_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake256_inc_ctx> state)>>
      SHA3_shake256_inc_ctx_reset;
}

/// Data structure for the state of the four-way parallel incremental SHAKE-128 API.
final class OQS_SHA3_shake128_x4_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure for the state of the four-way parallel incremental SHAKE-256 API.
final class OQS_SHA3_shake256_x4_inc_ctx extends ffi.Struct {
  /// Internal state.
  external ffi.Pointer<ffi.Void> ctx;
}

/// Data structure implemented by cryptographic provider for the
/// four-way parallel incremental SHAKE-256 operations.
final class OQS_SHA3_x4_callbacks extends ffi.Struct {
  /// Implementation of function OQS_SHA3_shake128_x4.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> out0,
              ffi.Pointer<ffi.Uint8> out1,
              ffi.Pointer<ffi.Uint8> out2,
              ffi.Pointer<ffi.Uint8> out3,
              ffi.Size outlen,
              ffi.Pointer<ffi.Uint8> in0,
              ffi.Pointer<ffi.Uint8> in1,
              ffi.Pointer<ffi.Uint8> in2,
              ffi.Pointer<ffi.Uint8> in3,
              ffi.Size inlen)>> SHA3_shake128_x4;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> state)>>
      SHA3_shake128_x4_inc_init;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> in0,
              ffi.Pointer<ffi.Uint8> in1,
              ffi.Pointer<ffi.Uint8> in2,
              ffi.Pointer<ffi.Uint8> in3,
              ffi.Size inlen)>> SHA3_shake128_x4_inc_absorb;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> state)>>
      SHA3_shake128_x4_inc_finalize;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_squeeze.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Uint8> out0,
                  ffi.Pointer<ffi.Uint8> out1,
                  ffi.Pointer<ffi.Uint8> out2,
                  ffi.Pointer<ffi.Uint8> out3,
                  ffi.Size outlen,
                  ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> state)>>
      SHA3_shake128_x4_inc_squeeze;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> state)>>
      SHA3_shake128_x4_inc_ctx_release;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> src)>>
      SHA3_shake128_x4_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_shake128_x4_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake128_x4_inc_ctx> state)>>
      SHA3_shake128_x4_inc_ctx_reset;

  /// Implementation of function OQS_SHA3_shake256_x4.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8> out0,
              ffi.Pointer<ffi.Uint8> out1,
              ffi.Pointer<ffi.Uint8> out2,
              ffi.Pointer<ffi.Uint8> out3,
              ffi.Size outlen,
              ffi.Pointer<ffi.Uint8> in0,
              ffi.Pointer<ffi.Uint8> in1,
              ffi.Pointer<ffi.Uint8> in2,
              ffi.Pointer<ffi.Uint8> in3,
              ffi.Size inlen)>> SHA3_shake256_x4;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_init.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> state)>>
      SHA3_shake256_x4_inc_init;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_absorb.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> state,
              ffi.Pointer<ffi.Uint8> in0,
              ffi.Pointer<ffi.Uint8> in1,
              ffi.Pointer<ffi.Uint8> in2,
              ffi.Pointer<ffi.Uint8> in3,
              ffi.Size inlen)>> SHA3_shake256_x4_inc_absorb;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_finalize.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> state)>>
      SHA3_shake256_x4_inc_finalize;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_squeeze.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Uint8> out0,
                  ffi.Pointer<ffi.Uint8> out1,
                  ffi.Pointer<ffi.Uint8> out2,
                  ffi.Pointer<ffi.Uint8> out3,
                  ffi.Size outlen,
                  ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> state)>>
      SHA3_shake256_x4_inc_squeeze;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_ctx_release.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> state)>>
      SHA3_shake256_x4_inc_ctx_release;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_ctx_clone.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> dest,
                  ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> src)>>
      SHA3_shake256_x4_inc_ctx_clone;

  /// Implementation of function OQS_SHA3_shake256_x4_inc_ctx_reset.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OQS_SHA3_shake256_x4_inc_ctx> state)>>
      SHA3_shake256_x4_inc_ctx_reset;
}

const String OQS_VERSION_TEXT = '0.14.1-dev';

const int OQS_VERSION_MAJOR = 0;

const int OQS_VERSION_MINOR = 14;

const int OQS_VERSION_PATCH = 1;

const String OQS_VERSION_PRE_RELEASE = '-dev';

const String OQS_COMPILE_BUILD_TARGET = 'AMD64-Windows-10.0.26100';

const int OQS_DIST_BUILD = 1;

const int OQS_DIST_X86_64_BUILD = 1;

const int ARCH_X86_64 = 1;

const int BUILD_SHARED_LIBS = 1;

const String OQS_OPT_TARGET = 'auto';

const int OQS_USE_CUPQC = 0;

const int OQS_ENABLE_KEM_FRODOKEM = 1;

const int OQS_ENABLE_KEM_frodokem_640_aes = 1;

const int OQS_ENABLE_KEM_frodokem_640_shake = 1;

const int OQS_ENABLE_KEM_frodokem_976_aes = 1;

const int OQS_ENABLE_KEM_frodokem_976_shake = 1;

const int OQS_ENABLE_KEM_frodokem_1344_aes = 1;

const int OQS_ENABLE_KEM_frodokem_1344_shake = 1;

const int OQS_ENABLE_KEM_NTRUPRIME = 1;

const int OQS_ENABLE_KEM_ntruprime_sntrup761 = 1;

const int OQS_ENABLE_KEM_CLASSIC_MCELIECE = 1;

const int OQS_ENABLE_KEM_classic_mceliece_348864 = 1;

const int OQS_ENABLE_KEM_classic_mceliece_348864f = 1;

const int OQS_ENABLE_KEM_classic_mceliece_460896 = 1;

const int OQS_ENABLE_KEM_classic_mceliece_460896f = 1;

const int OQS_ENABLE_KEM_classic_mceliece_6688128 = 1;

const int OQS_ENABLE_KEM_classic_mceliece_6688128f = 1;

const int OQS_ENABLE_KEM_classic_mceliece_6960119 = 1;

const int OQS_ENABLE_KEM_classic_mceliece_6960119f = 1;

const int OQS_ENABLE_KEM_classic_mceliece_8192128 = 1;

const int OQS_ENABLE_KEM_classic_mceliece_8192128f = 1;

const int OQS_ENABLE_KEM_KYBER = 1;

const int OQS_ENABLE_KEM_kyber_512 = 1;

const int OQS_ENABLE_KEM_kyber_768 = 1;

const int OQS_ENABLE_KEM_kyber_1024 = 1;

const int OQS_ENABLE_KEM_ML_KEM = 1;

const int OQS_ENABLE_KEM_ml_kem_512 = 1;

const int OQS_ENABLE_KEM_ml_kem_768 = 1;

const int OQS_ENABLE_KEM_ml_kem_1024 = 1;

const int OQS_ENABLE_SIG_DILITHIUM = 1;

const int OQS_ENABLE_SIG_dilithium_2 = 1;

const int OQS_ENABLE_SIG_dilithium_3 = 1;

const int OQS_ENABLE_SIG_dilithium_5 = 1;

const int OQS_ENABLE_SIG_ML_DSA = 1;

const int OQS_ENABLE_SIG_ml_dsa_44 = 1;

const int OQS_ENABLE_SIG_ml_dsa_65 = 1;

const int OQS_ENABLE_SIG_ml_dsa_87 = 1;

const int OQS_ENABLE_SIG_FALCON = 1;

const int OQS_ENABLE_SIG_falcon_512 = 1;

const int OQS_ENABLE_SIG_falcon_512_avx2 = 1;

const int OQS_ENABLE_SIG_falcon_1024 = 1;

const int OQS_ENABLE_SIG_falcon_1024_avx2 = 1;

const int OQS_ENABLE_SIG_falcon_padded_512 = 1;

const int OQS_ENABLE_SIG_falcon_padded_512_avx2 = 1;

const int OQS_ENABLE_SIG_falcon_padded_1024 = 1;

const int OQS_ENABLE_SIG_falcon_padded_1024_avx2 = 1;

const int OQS_ENABLE_SIG_SPHINCS = 1;

const int OQS_ENABLE_SIG_sphincs_sha2_128f_simple = 1;

const int OQS_ENABLE_SIG_sphincs_sha2_128s_simple = 1;

const int OQS_ENABLE_SIG_sphincs_sha2_192f_simple = 1;

const int OQS_ENABLE_SIG_sphincs_sha2_192s_simple = 1;

const int OQS_ENABLE_SIG_sphincs_sha2_256f_simple = 1;

const int OQS_ENABLE_SIG_sphincs_sha2_256s_simple = 1;

const int OQS_ENABLE_SIG_sphincs_shake_128f_simple = 1;

const int OQS_ENABLE_SIG_sphincs_shake_128s_simple = 1;

const int OQS_ENABLE_SIG_sphincs_shake_192f_simple = 1;

const int OQS_ENABLE_SIG_sphincs_shake_192s_simple = 1;

const int OQS_ENABLE_SIG_sphincs_shake_256f_simple = 1;

const int OQS_ENABLE_SIG_sphincs_shake_256s_simple = 1;

const int OQS_ENABLE_SIG_MAYO = 1;

const int OQS_ENABLE_SIG_mayo_1 = 1;

const int OQS_ENABLE_SIG_mayo_2 = 1;

const int OQS_ENABLE_SIG_mayo_3 = 1;

const int OQS_ENABLE_SIG_mayo_5 = 1;

const int OQS_ENABLE_SIG_CROSS = 1;

const int OQS_ENABLE_SIG_cross_rsdp_128_balanced = 1;

const int OQS_ENABLE_SIG_cross_rsdp_128_balanced_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_128_fast = 1;

const int OQS_ENABLE_SIG_cross_rsdp_128_fast_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_128_small = 1;

const int OQS_ENABLE_SIG_cross_rsdp_128_small_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_192_balanced = 1;

const int OQS_ENABLE_SIG_cross_rsdp_192_balanced_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_192_fast = 1;

const int OQS_ENABLE_SIG_cross_rsdp_192_fast_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_192_small = 1;

const int OQS_ENABLE_SIG_cross_rsdp_192_small_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_256_balanced = 1;

const int OQS_ENABLE_SIG_cross_rsdp_256_balanced_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_256_fast = 1;

const int OQS_ENABLE_SIG_cross_rsdp_256_fast_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdp_256_small = 1;

const int OQS_ENABLE_SIG_cross_rsdp_256_small_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_128_balanced = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_128_balanced_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_128_fast = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_128_fast_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_128_small = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_128_small_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_192_balanced = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_192_balanced_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_192_fast = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_192_fast_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_192_small = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_192_small_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_256_balanced = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_256_balanced_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_256_fast = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_256_fast_avx2 = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_256_small = 1;

const int OQS_ENABLE_SIG_cross_rsdpg_256_small_avx2 = 1;

const int OQS_ENABLE_SIG_UOV = 1;

const int OQS_ENABLE_SIG_uov_ov_Is = 1;

const int OQS_ENABLE_SIG_uov_ov_Ip = 1;

const int OQS_ENABLE_SIG_uov_ov_III = 1;

const int OQS_ENABLE_SIG_uov_ov_V = 1;

const int OQS_ENABLE_SIG_uov_ov_Is_pkc = 1;

const int OQS_ENABLE_SIG_uov_ov_Ip_pkc = 1;

const int OQS_ENABLE_SIG_uov_ov_III_pkc = 1;

const int OQS_ENABLE_SIG_uov_ov_V_pkc = 1;

const int OQS_ENABLE_SIG_uov_ov_Is_pkc_skc = 1;

const int OQS_ENABLE_SIG_uov_ov_Ip_pkc_skc = 1;

const int OQS_ENABLE_SIG_uov_ov_III_pkc_skc = 1;

const int OQS_ENABLE_SIG_uov_ov_V_pkc_skc = 1;

const int OQS_ENABLE_SIG_SNOVA = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_24_5_4 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_24_5_4_SHAKE = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_24_5_4_esk = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_24_5_4_SHAKE_esk = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_37_17_2 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_25_8_3 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_56_25_2 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_49_11_3 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_37_8_4 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_24_5_5 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_60_10_4 = 1;

const int OQS_ENABLE_SIG_snova_SNOVA_29_6_5 = 1;

const int OQS_LIBJADE_BUILD = 0;

const String OQS_RAND_alg_system = 'system';

const String OQS_RAND_alg_openssl = 'OpenSSL';

const String OQS_KEM_alg_bike_l1 = 'BIKE-L1';

const String OQS_KEM_alg_bike_l3 = 'BIKE-L3';

const String OQS_KEM_alg_bike_l5 = 'BIKE-L5';

const String OQS_KEM_alg_classic_mceliece_348864 = 'Classic-McEliece-348864';

const String OQS_KEM_alg_classic_mceliece_348864f = 'Classic-McEliece-348864f';

const String OQS_KEM_alg_classic_mceliece_460896 = 'Classic-McEliece-460896';

const String OQS_KEM_alg_classic_mceliece_460896f = 'Classic-McEliece-460896f';

const String OQS_KEM_alg_classic_mceliece_6688128 = 'Classic-McEliece-6688128';

const String OQS_KEM_alg_classic_mceliece_6688128f =
    'Classic-McEliece-6688128f';

const String OQS_KEM_alg_classic_mceliece_6960119 = 'Classic-McEliece-6960119';

const String OQS_KEM_alg_classic_mceliece_6960119f =
    'Classic-McEliece-6960119f';

const String OQS_KEM_alg_classic_mceliece_8192128 = 'Classic-McEliece-8192128';

const String OQS_KEM_alg_classic_mceliece_8192128f =
    'Classic-McEliece-8192128f';

const String OQS_KEM_alg_hqc_128 = 'HQC-128';

const String OQS_KEM_alg_hqc_192 = 'HQC-192';

const String OQS_KEM_alg_hqc_256 = 'HQC-256';

const String OQS_KEM_alg_kyber_512 = 'Kyber512';

const String OQS_KEM_alg_kyber_768 = 'Kyber768';

const String OQS_KEM_alg_kyber_1024 = 'Kyber1024';

const String OQS_KEM_alg_ml_kem_512 = 'ML-KEM-512';

const String OQS_KEM_alg_ml_kem_768 = 'ML-KEM-768';

const String OQS_KEM_alg_ml_kem_1024 = 'ML-KEM-1024';

const String OQS_KEM_alg_ntruprime_sntrup761 = 'sntrup761';

const String OQS_KEM_alg_frodokem_640_aes = 'FrodoKEM-640-AES';

const String OQS_KEM_alg_frodokem_640_shake = 'FrodoKEM-640-SHAKE';

const String OQS_KEM_alg_frodokem_976_aes = 'FrodoKEM-976-AES';

const String OQS_KEM_alg_frodokem_976_shake = 'FrodoKEM-976-SHAKE';

const String OQS_KEM_alg_frodokem_1344_aes = 'FrodoKEM-1344-AES';

const String OQS_KEM_alg_frodokem_1344_shake = 'FrodoKEM-1344-SHAKE';

const int OQS_KEM_algs_length = 29;

const int OQS_KEM_classic_mceliece_348864_length_public_key = 261120;

const int OQS_KEM_classic_mceliece_348864_length_secret_key = 6492;

const int OQS_KEM_classic_mceliece_348864_length_ciphertext = 96;

const int OQS_KEM_classic_mceliece_348864_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_348864_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_348864f_length_public_key = 261120;

const int OQS_KEM_classic_mceliece_348864f_length_secret_key = 6492;

const int OQS_KEM_classic_mceliece_348864f_length_ciphertext = 96;

const int OQS_KEM_classic_mceliece_348864f_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_348864f_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_460896_length_public_key = 524160;

const int OQS_KEM_classic_mceliece_460896_length_secret_key = 13608;

const int OQS_KEM_classic_mceliece_460896_length_ciphertext = 156;

const int OQS_KEM_classic_mceliece_460896_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_460896_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_460896f_length_public_key = 524160;

const int OQS_KEM_classic_mceliece_460896f_length_secret_key = 13608;

const int OQS_KEM_classic_mceliece_460896f_length_ciphertext = 156;

const int OQS_KEM_classic_mceliece_460896f_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_460896f_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_6688128_length_public_key = 1044992;

const int OQS_KEM_classic_mceliece_6688128_length_secret_key = 13932;

const int OQS_KEM_classic_mceliece_6688128_length_ciphertext = 208;

const int OQS_KEM_classic_mceliece_6688128_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_6688128_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_6688128f_length_public_key = 1044992;

const int OQS_KEM_classic_mceliece_6688128f_length_secret_key = 13932;

const int OQS_KEM_classic_mceliece_6688128f_length_ciphertext = 208;

const int OQS_KEM_classic_mceliece_6688128f_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_6688128f_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_6960119_length_public_key = 1047319;

const int OQS_KEM_classic_mceliece_6960119_length_secret_key = 13948;

const int OQS_KEM_classic_mceliece_6960119_length_ciphertext = 194;

const int OQS_KEM_classic_mceliece_6960119_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_6960119_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_6960119f_length_public_key = 1047319;

const int OQS_KEM_classic_mceliece_6960119f_length_secret_key = 13948;

const int OQS_KEM_classic_mceliece_6960119f_length_ciphertext = 194;

const int OQS_KEM_classic_mceliece_6960119f_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_6960119f_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_8192128_length_public_key = 1357824;

const int OQS_KEM_classic_mceliece_8192128_length_secret_key = 14120;

const int OQS_KEM_classic_mceliece_8192128_length_ciphertext = 208;

const int OQS_KEM_classic_mceliece_8192128_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_8192128_length_keypair_seed = 0;

const int OQS_KEM_classic_mceliece_8192128f_length_public_key = 1357824;

const int OQS_KEM_classic_mceliece_8192128f_length_secret_key = 14120;

const int OQS_KEM_classic_mceliece_8192128f_length_ciphertext = 208;

const int OQS_KEM_classic_mceliece_8192128f_length_shared_secret = 32;

const int OQS_KEM_classic_mceliece_8192128f_length_keypair_seed = 0;

const int OQS_KEM_kyber_512_length_public_key = 800;

const int OQS_KEM_kyber_512_length_secret_key = 1632;

const int OQS_KEM_kyber_512_length_ciphertext = 768;

const int OQS_KEM_kyber_512_length_shared_secret = 32;

const int OQS_KEM_kyber_512_length_keypair_seed = 0;

const int OQS_KEM_kyber_768_length_public_key = 1184;

const int OQS_KEM_kyber_768_length_secret_key = 2400;

const int OQS_KEM_kyber_768_length_ciphertext = 1088;

const int OQS_KEM_kyber_768_length_shared_secret = 32;

const int OQS_KEM_kyber_768_length_keypair_seed = 0;

const int OQS_KEM_kyber_1024_length_public_key = 1568;

const int OQS_KEM_kyber_1024_length_secret_key = 3168;

const int OQS_KEM_kyber_1024_length_ciphertext = 1568;

const int OQS_KEM_kyber_1024_length_shared_secret = 32;

const int OQS_KEM_kyber_1024_length_keypair_seed = 0;

const int OQS_KEM_ml_kem_512_length_public_key = 800;

const int OQS_KEM_ml_kem_512_length_secret_key = 1632;

const int OQS_KEM_ml_kem_512_length_ciphertext = 768;

const int OQS_KEM_ml_kem_512_length_shared_secret = 32;

const int OQS_KEM_ml_kem_512_length_keypair_seed = 64;

const int OQS_KEM_ml_kem_768_length_public_key = 1184;

const int OQS_KEM_ml_kem_768_length_secret_key = 2400;

const int OQS_KEM_ml_kem_768_length_ciphertext = 1088;

const int OQS_KEM_ml_kem_768_length_shared_secret = 32;

const int OQS_KEM_ml_kem_768_length_keypair_seed = 64;

const int OQS_KEM_ml_kem_1024_length_public_key = 1568;

const int OQS_KEM_ml_kem_1024_length_secret_key = 3168;

const int OQS_KEM_ml_kem_1024_length_ciphertext = 1568;

const int OQS_KEM_ml_kem_1024_length_shared_secret = 32;

const int OQS_KEM_ml_kem_1024_length_keypair_seed = 64;

const int OQS_KEM_ntruprime_sntrup761_length_public_key = 1158;

const int OQS_KEM_ntruprime_sntrup761_length_secret_key = 1763;

const int OQS_KEM_ntruprime_sntrup761_length_ciphertext = 1039;

const int OQS_KEM_ntruprime_sntrup761_length_shared_secret = 32;

const int OQS_KEM_ntruprime_sntrup761_length_keypair_seed = 0;

const int OQS_KEM_frodokem_640_aes_length_public_key = 9616;

const int OQS_KEM_frodokem_640_aes_length_secret_key = 19888;

const int OQS_KEM_frodokem_640_aes_length_ciphertext = 9720;

const int OQS_KEM_frodokem_640_aes_length_shared_secret = 16;

const int OQS_KEM_frodokem_640_aes_length_keypair_seed = 0;

const int OQS_KEM_frodokem_640_shake_length_public_key = 9616;

const int OQS_KEM_frodokem_640_shake_length_secret_key = 19888;

const int OQS_KEM_frodokem_640_shake_length_ciphertext = 9720;

const int OQS_KEM_frodokem_640_shake_length_shared_secret = 16;

const int OQS_KEM_frodokem_640_shake_length_keypair_seed = 0;

const int OQS_KEM_frodokem_976_aes_length_public_key = 15632;

const int OQS_KEM_frodokem_976_aes_length_secret_key = 31296;

const int OQS_KEM_frodokem_976_aes_length_ciphertext = 15744;

const int OQS_KEM_frodokem_976_aes_length_shared_secret = 24;

const int OQS_KEM_frodokem_976_aes_length_keypair_seed = 0;

const int OQS_KEM_frodokem_976_shake_length_public_key = 15632;

const int OQS_KEM_frodokem_976_shake_length_secret_key = 31296;

const int OQS_KEM_frodokem_976_shake_length_ciphertext = 15744;

const int OQS_KEM_frodokem_976_shake_length_shared_secret = 24;

const int OQS_KEM_frodokem_976_shake_length_keypair_seed = 0;

const int OQS_KEM_frodokem_1344_aes_length_public_key = 21520;

const int OQS_KEM_frodokem_1344_aes_length_secret_key = 43088;

const int OQS_KEM_frodokem_1344_aes_length_ciphertext = 21632;

const int OQS_KEM_frodokem_1344_aes_length_shared_secret = 32;

const int OQS_KEM_frodokem_1344_aes_length_keypair_seed = 0;

const int OQS_KEM_frodokem_1344_shake_length_public_key = 21520;

const int OQS_KEM_frodokem_1344_shake_length_secret_key = 43088;

const int OQS_KEM_frodokem_1344_shake_length_ciphertext = 21632;

const int OQS_KEM_frodokem_1344_shake_length_shared_secret = 32;

const int OQS_KEM_frodokem_1344_shake_length_keypair_seed = 0;

const String OQS_SIG_alg_dilithium_2 = 'Dilithium2';

const String OQS_SIG_alg_dilithium_3 = 'Dilithium3';

const String OQS_SIG_alg_dilithium_5 = 'Dilithium5';

const String OQS_SIG_alg_ml_dsa_44 = 'ML-DSA-44';

const String OQS_SIG_alg_ml_dsa_65 = 'ML-DSA-65';

const String OQS_SIG_alg_ml_dsa_87 = 'ML-DSA-87';

const String OQS_SIG_alg_falcon_512 = 'Falcon-512';

const String OQS_SIG_alg_falcon_1024 = 'Falcon-1024';

const String OQS_SIG_alg_falcon_padded_512 = 'Falcon-padded-512';

const String OQS_SIG_alg_falcon_padded_1024 = 'Falcon-padded-1024';

const String OQS_SIG_alg_sphincs_sha2_128f_simple = 'SPHINCS+-SHA2-128f-simple';

const String OQS_SIG_alg_sphincs_sha2_128s_simple = 'SPHINCS+-SHA2-128s-simple';

const String OQS_SIG_alg_sphincs_sha2_192f_simple = 'SPHINCS+-SHA2-192f-simple';

const String OQS_SIG_alg_sphincs_sha2_192s_simple = 'SPHINCS+-SHA2-192s-simple';

const String OQS_SIG_alg_sphincs_sha2_256f_simple = 'SPHINCS+-SHA2-256f-simple';

const String OQS_SIG_alg_sphincs_sha2_256s_simple = 'SPHINCS+-SHA2-256s-simple';

const String OQS_SIG_alg_sphincs_shake_128f_simple =
    'SPHINCS+-SHAKE-128f-simple';

const String OQS_SIG_alg_sphincs_shake_128s_simple =
    'SPHINCS+-SHAKE-128s-simple';

const String OQS_SIG_alg_sphincs_shake_192f_simple =
    'SPHINCS+-SHAKE-192f-simple';

const String OQS_SIG_alg_sphincs_shake_192s_simple =
    'SPHINCS+-SHAKE-192s-simple';

const String OQS_SIG_alg_sphincs_shake_256f_simple =
    'SPHINCS+-SHAKE-256f-simple';

const String OQS_SIG_alg_sphincs_shake_256s_simple =
    'SPHINCS+-SHAKE-256s-simple';

const String OQS_SIG_alg_mayo_1 = 'MAYO-1';

const String OQS_SIG_alg_mayo_2 = 'MAYO-2';

const String OQS_SIG_alg_mayo_3 = 'MAYO-3';

const String OQS_SIG_alg_mayo_5 = 'MAYO-5';

const String OQS_SIG_alg_cross_rsdp_128_balanced = 'cross-rsdp-128-balanced';

const String OQS_SIG_alg_cross_rsdp_128_fast = 'cross-rsdp-128-fast';

const String OQS_SIG_alg_cross_rsdp_128_small = 'cross-rsdp-128-small';

const String OQS_SIG_alg_cross_rsdp_192_balanced = 'cross-rsdp-192-balanced';

const String OQS_SIG_alg_cross_rsdp_192_fast = 'cross-rsdp-192-fast';

const String OQS_SIG_alg_cross_rsdp_192_small = 'cross-rsdp-192-small';

const String OQS_SIG_alg_cross_rsdp_256_balanced = 'cross-rsdp-256-balanced';

const String OQS_SIG_alg_cross_rsdp_256_fast = 'cross-rsdp-256-fast';

const String OQS_SIG_alg_cross_rsdp_256_small = 'cross-rsdp-256-small';

const String OQS_SIG_alg_cross_rsdpg_128_balanced = 'cross-rsdpg-128-balanced';

const String OQS_SIG_alg_cross_rsdpg_128_fast = 'cross-rsdpg-128-fast';

const String OQS_SIG_alg_cross_rsdpg_128_small = 'cross-rsdpg-128-small';

const String OQS_SIG_alg_cross_rsdpg_192_balanced = 'cross-rsdpg-192-balanced';

const String OQS_SIG_alg_cross_rsdpg_192_fast = 'cross-rsdpg-192-fast';

const String OQS_SIG_alg_cross_rsdpg_192_small = 'cross-rsdpg-192-small';

const String OQS_SIG_alg_cross_rsdpg_256_balanced = 'cross-rsdpg-256-balanced';

const String OQS_SIG_alg_cross_rsdpg_256_fast = 'cross-rsdpg-256-fast';

const String OQS_SIG_alg_cross_rsdpg_256_small = 'cross-rsdpg-256-small';

const String OQS_SIG_alg_uov_ov_Is = 'OV-Is';

const String OQS_SIG_alg_uov_ov_Ip = 'OV-Ip';

const String OQS_SIG_alg_uov_ov_III = 'OV-III';

const String OQS_SIG_alg_uov_ov_V = 'OV-V';

const String OQS_SIG_alg_uov_ov_Is_pkc = 'OV-Is-pkc';

const String OQS_SIG_alg_uov_ov_Ip_pkc = 'OV-Ip-pkc';

const String OQS_SIG_alg_uov_ov_III_pkc = 'OV-III-pkc';

const String OQS_SIG_alg_uov_ov_V_pkc = 'OV-V-pkc';

const String OQS_SIG_alg_uov_ov_Is_pkc_skc = 'OV-Is-pkc-skc';

const String OQS_SIG_alg_uov_ov_Ip_pkc_skc = 'OV-Ip-pkc-skc';

const String OQS_SIG_alg_uov_ov_III_pkc_skc = 'OV-III-pkc-skc';

const String OQS_SIG_alg_uov_ov_V_pkc_skc = 'OV-V-pkc-skc';

const String OQS_SIG_alg_snova_SNOVA_24_5_4 = 'SNOVA_24_5_4';

const String OQS_SIG_alg_snova_SNOVA_24_5_4_SHAKE = 'SNOVA_24_5_4_SHAKE';

const String OQS_SIG_alg_snova_SNOVA_24_5_4_esk = 'SNOVA_24_5_4_esk';

const String OQS_SIG_alg_snova_SNOVA_24_5_4_SHAKE_esk =
    'SNOVA_24_5_4_SHAKE_esk';

const String OQS_SIG_alg_snova_SNOVA_37_17_2 = 'SNOVA_37_17_2';

const String OQS_SIG_alg_snova_SNOVA_25_8_3 = 'SNOVA_25_8_3';

const String OQS_SIG_alg_snova_SNOVA_56_25_2 = 'SNOVA_56_25_2';

const String OQS_SIG_alg_snova_SNOVA_49_11_3 = 'SNOVA_49_11_3';

const String OQS_SIG_alg_snova_SNOVA_37_8_4 = 'SNOVA_37_8_4';

const String OQS_SIG_alg_snova_SNOVA_24_5_5 = 'SNOVA_24_5_5';

const String OQS_SIG_alg_snova_SNOVA_60_10_4 = 'SNOVA_60_10_4';

const String OQS_SIG_alg_snova_SNOVA_29_6_5 = 'SNOVA_29_6_5';

const int OQS_SIG_algs_length = 68;

const int OQS_SIG_dilithium_2_length_public_key = 1312;

const int OQS_SIG_dilithium_2_length_secret_key = 2528;

const int OQS_SIG_dilithium_2_length_signature = 2420;

const int OQS_SIG_dilithium_3_length_public_key = 1952;

const int OQS_SIG_dilithium_3_length_secret_key = 4000;

const int OQS_SIG_dilithium_3_length_signature = 3293;

const int OQS_SIG_dilithium_5_length_public_key = 2592;

const int OQS_SIG_dilithium_5_length_secret_key = 4864;

const int OQS_SIG_dilithium_5_length_signature = 4595;

const int OQS_SIG_ml_dsa_44_length_public_key = 1312;

const int OQS_SIG_ml_dsa_44_length_secret_key = 2560;

const int OQS_SIG_ml_dsa_44_length_signature = 2420;

const int OQS_SIG_ml_dsa_65_length_public_key = 1952;

const int OQS_SIG_ml_dsa_65_length_secret_key = 4032;

const int OQS_SIG_ml_dsa_65_length_signature = 3309;

const int OQS_SIG_ml_dsa_87_length_public_key = 2592;

const int OQS_SIG_ml_dsa_87_length_secret_key = 4896;

const int OQS_SIG_ml_dsa_87_length_signature = 4627;

const int OQS_SIG_falcon_512_length_public_key = 897;

const int OQS_SIG_falcon_512_length_secret_key = 1281;

const int OQS_SIG_falcon_512_length_signature = 752;

const int OQS_SIG_falcon_1024_length_public_key = 1793;

const int OQS_SIG_falcon_1024_length_secret_key = 2305;

const int OQS_SIG_falcon_1024_length_signature = 1462;

const int OQS_SIG_falcon_padded_512_length_public_key = 897;

const int OQS_SIG_falcon_padded_512_length_secret_key = 1281;

const int OQS_SIG_falcon_padded_512_length_signature = 666;

const int OQS_SIG_falcon_padded_1024_length_public_key = 1793;

const int OQS_SIG_falcon_padded_1024_length_secret_key = 2305;

const int OQS_SIG_falcon_padded_1024_length_signature = 1280;

const int OQS_SIG_sphincs_sha2_128f_simple_length_public_key = 32;

const int OQS_SIG_sphincs_sha2_128f_simple_length_secret_key = 64;

const int OQS_SIG_sphincs_sha2_128f_simple_length_signature = 17088;

const int OQS_SIG_sphincs_sha2_128s_simple_length_public_key = 32;

const int OQS_SIG_sphincs_sha2_128s_simple_length_secret_key = 64;

const int OQS_SIG_sphincs_sha2_128s_simple_length_signature = 7856;

const int OQS_SIG_sphincs_sha2_192f_simple_length_public_key = 48;

const int OQS_SIG_sphincs_sha2_192f_simple_length_secret_key = 96;

const int OQS_SIG_sphincs_sha2_192f_simple_length_signature = 35664;

const int OQS_SIG_sphincs_sha2_192s_simple_length_public_key = 48;

const int OQS_SIG_sphincs_sha2_192s_simple_length_secret_key = 96;

const int OQS_SIG_sphincs_sha2_192s_simple_length_signature = 16224;

const int OQS_SIG_sphincs_sha2_256f_simple_length_public_key = 64;

const int OQS_SIG_sphincs_sha2_256f_simple_length_secret_key = 128;

const int OQS_SIG_sphincs_sha2_256f_simple_length_signature = 49856;

const int OQS_SIG_sphincs_sha2_256s_simple_length_public_key = 64;

const int OQS_SIG_sphincs_sha2_256s_simple_length_secret_key = 128;

const int OQS_SIG_sphincs_sha2_256s_simple_length_signature = 29792;

const int OQS_SIG_sphincs_shake_128f_simple_length_public_key = 32;

const int OQS_SIG_sphincs_shake_128f_simple_length_secret_key = 64;

const int OQS_SIG_sphincs_shake_128f_simple_length_signature = 17088;

const int OQS_SIG_sphincs_shake_128s_simple_length_public_key = 32;

const int OQS_SIG_sphincs_shake_128s_simple_length_secret_key = 64;

const int OQS_SIG_sphincs_shake_128s_simple_length_signature = 7856;

const int OQS_SIG_sphincs_shake_192f_simple_length_public_key = 48;

const int OQS_SIG_sphincs_shake_192f_simple_length_secret_key = 96;

const int OQS_SIG_sphincs_shake_192f_simple_length_signature = 35664;

const int OQS_SIG_sphincs_shake_192s_simple_length_public_key = 48;

const int OQS_SIG_sphincs_shake_192s_simple_length_secret_key = 96;

const int OQS_SIG_sphincs_shake_192s_simple_length_signature = 16224;

const int OQS_SIG_sphincs_shake_256f_simple_length_public_key = 64;

const int OQS_SIG_sphincs_shake_256f_simple_length_secret_key = 128;

const int OQS_SIG_sphincs_shake_256f_simple_length_signature = 49856;

const int OQS_SIG_sphincs_shake_256s_simple_length_public_key = 64;

const int OQS_SIG_sphincs_shake_256s_simple_length_secret_key = 128;

const int OQS_SIG_sphincs_shake_256s_simple_length_signature = 29792;

const int OQS_SIG_mayo_1_length_public_key = 1420;

const int OQS_SIG_mayo_1_length_secret_key = 24;

const int OQS_SIG_mayo_1_length_signature = 454;

const int OQS_SIG_mayo_2_length_public_key = 4912;

const int OQS_SIG_mayo_2_length_secret_key = 24;

const int OQS_SIG_mayo_2_length_signature = 186;

const int OQS_SIG_mayo_3_length_public_key = 2986;

const int OQS_SIG_mayo_3_length_secret_key = 32;

const int OQS_SIG_mayo_3_length_signature = 681;

const int OQS_SIG_mayo_5_length_public_key = 5554;

const int OQS_SIG_mayo_5_length_secret_key = 40;

const int OQS_SIG_mayo_5_length_signature = 964;

const int OQS_SIG_cross_rsdp_128_balanced_length_public_key = 77;

const int OQS_SIG_cross_rsdp_128_balanced_length_secret_key = 32;

const int OQS_SIG_cross_rsdp_128_balanced_length_signature = 13152;

const int OQS_SIG_cross_rsdp_128_fast_length_public_key = 77;

const int OQS_SIG_cross_rsdp_128_fast_length_secret_key = 32;

const int OQS_SIG_cross_rsdp_128_fast_length_signature = 18432;

const int OQS_SIG_cross_rsdp_128_small_length_public_key = 77;

const int OQS_SIG_cross_rsdp_128_small_length_secret_key = 32;

const int OQS_SIG_cross_rsdp_128_small_length_signature = 12432;

const int OQS_SIG_cross_rsdp_192_balanced_length_public_key = 115;

const int OQS_SIG_cross_rsdp_192_balanced_length_secret_key = 48;

const int OQS_SIG_cross_rsdp_192_balanced_length_signature = 29853;

const int OQS_SIG_cross_rsdp_192_fast_length_public_key = 115;

const int OQS_SIG_cross_rsdp_192_fast_length_secret_key = 48;

const int OQS_SIG_cross_rsdp_192_fast_length_signature = 41406;

const int OQS_SIG_cross_rsdp_192_small_length_public_key = 115;

const int OQS_SIG_cross_rsdp_192_small_length_secret_key = 48;

const int OQS_SIG_cross_rsdp_192_small_length_signature = 28391;

const int OQS_SIG_cross_rsdp_256_balanced_length_public_key = 153;

const int OQS_SIG_cross_rsdp_256_balanced_length_secret_key = 64;

const int OQS_SIG_cross_rsdp_256_balanced_length_signature = 53527;

const int OQS_SIG_cross_rsdp_256_fast_length_public_key = 153;

const int OQS_SIG_cross_rsdp_256_fast_length_secret_key = 64;

const int OQS_SIG_cross_rsdp_256_fast_length_signature = 74590;

const int OQS_SIG_cross_rsdp_256_small_length_public_key = 153;

const int OQS_SIG_cross_rsdp_256_small_length_secret_key = 64;

const int OQS_SIG_cross_rsdp_256_small_length_signature = 50818;

const int OQS_SIG_cross_rsdpg_128_balanced_length_public_key = 54;

const int OQS_SIG_cross_rsdpg_128_balanced_length_secret_key = 32;

const int OQS_SIG_cross_rsdpg_128_balanced_length_signature = 9120;

const int OQS_SIG_cross_rsdpg_128_fast_length_public_key = 54;

const int OQS_SIG_cross_rsdpg_128_fast_length_secret_key = 32;

const int OQS_SIG_cross_rsdpg_128_fast_length_signature = 11980;

const int OQS_SIG_cross_rsdpg_128_small_length_public_key = 54;

const int OQS_SIG_cross_rsdpg_128_small_length_secret_key = 32;

const int OQS_SIG_cross_rsdpg_128_small_length_signature = 8960;

const int OQS_SIG_cross_rsdpg_192_balanced_length_public_key = 83;

const int OQS_SIG_cross_rsdpg_192_balanced_length_secret_key = 48;

const int OQS_SIG_cross_rsdpg_192_balanced_length_signature = 22464;

const int OQS_SIG_cross_rsdpg_192_fast_length_public_key = 83;

const int OQS_SIG_cross_rsdpg_192_fast_length_secret_key = 48;

const int OQS_SIG_cross_rsdpg_192_fast_length_signature = 26772;

const int OQS_SIG_cross_rsdpg_192_small_length_public_key = 83;

const int OQS_SIG_cross_rsdpg_192_small_length_secret_key = 48;

const int OQS_SIG_cross_rsdpg_192_small_length_signature = 20452;

const int OQS_SIG_cross_rsdpg_256_balanced_length_public_key = 106;

const int OQS_SIG_cross_rsdpg_256_balanced_length_secret_key = 64;

const int OQS_SIG_cross_rsdpg_256_balanced_length_signature = 40100;

const int OQS_SIG_cross_rsdpg_256_fast_length_public_key = 106;

const int OQS_SIG_cross_rsdpg_256_fast_length_secret_key = 64;

const int OQS_SIG_cross_rsdpg_256_fast_length_signature = 48102;

const int OQS_SIG_cross_rsdpg_256_small_length_public_key = 106;

const int OQS_SIG_cross_rsdpg_256_small_length_secret_key = 64;

const int OQS_SIG_cross_rsdpg_256_small_length_signature = 36454;

const int OQS_SIG_uov_ov_Is_length_public_key = 412160;

const int OQS_SIG_uov_ov_Is_length_secret_key = 348704;

const int OQS_SIG_uov_ov_Is_length_signature = 96;

const int OQS_SIG_uov_ov_Ip_length_public_key = 278432;

const int OQS_SIG_uov_ov_Ip_length_secret_key = 237896;

const int OQS_SIG_uov_ov_Ip_length_signature = 128;

const int OQS_SIG_uov_ov_III_length_public_key = 1225440;

const int OQS_SIG_uov_ov_III_length_secret_key = 1044320;

const int OQS_SIG_uov_ov_III_length_signature = 200;

const int OQS_SIG_uov_ov_V_length_public_key = 2869440;

const int OQS_SIG_uov_ov_V_length_secret_key = 2436704;

const int OQS_SIG_uov_ov_V_length_signature = 260;

const int OQS_SIG_uov_ov_Is_pkc_length_public_key = 66576;

const int OQS_SIG_uov_ov_Is_pkc_length_secret_key = 348704;

const int OQS_SIG_uov_ov_Is_pkc_length_signature = 96;

const int OQS_SIG_uov_ov_Ip_pkc_length_public_key = 43576;

const int OQS_SIG_uov_ov_Ip_pkc_length_secret_key = 237896;

const int OQS_SIG_uov_ov_Ip_pkc_length_signature = 128;

const int OQS_SIG_uov_ov_III_pkc_length_public_key = 189232;

const int OQS_SIG_uov_ov_III_pkc_length_secret_key = 1044320;

const int OQS_SIG_uov_ov_III_pkc_length_signature = 200;

const int OQS_SIG_uov_ov_V_pkc_length_public_key = 446992;

const int OQS_SIG_uov_ov_V_pkc_length_secret_key = 2436704;

const int OQS_SIG_uov_ov_V_pkc_length_signature = 260;

const int OQS_SIG_uov_ov_Is_pkc_skc_length_public_key = 66576;

const int OQS_SIG_uov_ov_Is_pkc_skc_length_secret_key = 32;

const int OQS_SIG_uov_ov_Is_pkc_skc_length_signature = 96;

const int OQS_SIG_uov_ov_Ip_pkc_skc_length_public_key = 43576;

const int OQS_SIG_uov_ov_Ip_pkc_skc_length_secret_key = 32;

const int OQS_SIG_uov_ov_Ip_pkc_skc_length_signature = 128;

const int OQS_SIG_uov_ov_III_pkc_skc_length_public_key = 189232;

const int OQS_SIG_uov_ov_III_pkc_skc_length_secret_key = 32;

const int OQS_SIG_uov_ov_III_pkc_skc_length_signature = 200;

const int OQS_SIG_uov_ov_V_pkc_skc_length_public_key = 446992;

const int OQS_SIG_uov_ov_V_pkc_skc_length_secret_key = 32;

const int OQS_SIG_uov_ov_V_pkc_skc_length_signature = 260;

const int OQS_SIG_snova_SNOVA_24_5_4_length_public_key = 1016;

const int OQS_SIG_snova_SNOVA_24_5_4_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_24_5_4_length_signature = 248;

const int OQS_SIG_snova_SNOVA_24_5_4_SHAKE_length_public_key = 1016;

const int OQS_SIG_snova_SNOVA_24_5_4_SHAKE_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_24_5_4_SHAKE_length_signature = 248;

const int OQS_SIG_snova_SNOVA_24_5_4_esk_length_public_key = 1016;

const int OQS_SIG_snova_SNOVA_24_5_4_esk_length_secret_key = 36848;

const int OQS_SIG_snova_SNOVA_24_5_4_esk_length_signature = 248;

const int OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_length_public_key = 1016;

const int OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_length_secret_key = 36848;

const int OQS_SIG_snova_SNOVA_24_5_4_SHAKE_esk_length_signature = 248;

const int OQS_SIG_snova_SNOVA_37_17_2_length_public_key = 9842;

const int OQS_SIG_snova_SNOVA_37_17_2_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_37_17_2_length_signature = 124;

const int OQS_SIG_snova_SNOVA_25_8_3_length_public_key = 2320;

const int OQS_SIG_snova_SNOVA_25_8_3_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_25_8_3_length_signature = 165;

const int OQS_SIG_snova_SNOVA_56_25_2_length_public_key = 31266;

const int OQS_SIG_snova_SNOVA_56_25_2_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_56_25_2_length_signature = 178;

const int OQS_SIG_snova_SNOVA_49_11_3_length_public_key = 6006;

const int OQS_SIG_snova_SNOVA_49_11_3_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_49_11_3_length_signature = 286;

const int OQS_SIG_snova_SNOVA_37_8_4_length_public_key = 4112;

const int OQS_SIG_snova_SNOVA_37_8_4_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_37_8_4_length_signature = 376;

const int OQS_SIG_snova_SNOVA_24_5_5_length_public_key = 1579;

const int OQS_SIG_snova_SNOVA_24_5_5_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_24_5_5_length_signature = 379;

const int OQS_SIG_snova_SNOVA_60_10_4_length_public_key = 8016;

const int OQS_SIG_snova_SNOVA_60_10_4_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_60_10_4_length_signature = 576;

const int OQS_SIG_snova_SNOVA_29_6_5_length_public_key = 2716;

const int OQS_SIG_snova_SNOVA_29_6_5_length_secret_key = 48;

const int OQS_SIG_snova_SNOVA_29_6_5_length_signature = 454;

const String OQS_SIG_STFL_alg_xmss_sha256_h10 = 'XMSS-SHA2_10_256';

const String OQS_SIG_STFL_alg_xmss_sha256_h16 = 'XMSS-SHA2_16_256';

const String OQS_SIG_STFL_alg_xmss_sha256_h20 = 'XMSS-SHA2_20_256';

const String OQS_SIG_STFL_alg_xmss_shake128_h10 = 'XMSS-SHAKE_10_256';

const String OQS_SIG_STFL_alg_xmss_shake128_h16 = 'XMSS-SHAKE_16_256';

const String OQS_SIG_STFL_alg_xmss_shake128_h20 = 'XMSS-SHAKE_20_256';

const String OQS_SIG_STFL_alg_xmss_sha512_h10 = 'XMSS-SHA2_10_512';

const String OQS_SIG_STFL_alg_xmss_sha512_h16 = 'XMSS-SHA2_16_512';

const String OQS_SIG_STFL_alg_xmss_sha512_h20 = 'XMSS-SHA2_20_512';

const String OQS_SIG_STFL_alg_xmss_shake256_h10 = 'XMSS-SHAKE_10_512';

const String OQS_SIG_STFL_alg_xmss_shake256_h16 = 'XMSS-SHAKE_16_512';

const String OQS_SIG_STFL_alg_xmss_shake256_h20 = 'XMSS-SHAKE_20_512';

const String OQS_SIG_STFL_alg_xmss_sha256_h10_192 = 'XMSS-SHA2_10_192';

const String OQS_SIG_STFL_alg_xmss_sha256_h16_192 = 'XMSS-SHA2_16_192';

const String OQS_SIG_STFL_alg_xmss_sha256_h20_192 = 'XMSS-SHA2_20_192';

const String OQS_SIG_STFL_alg_xmss_shake256_h10_192 = 'XMSS-SHAKE256_10_192';

const String OQS_SIG_STFL_alg_xmss_shake256_h16_192 = 'XMSS-SHAKE256_16_192';

const String OQS_SIG_STFL_alg_xmss_shake256_h20_192 = 'XMSS-SHAKE256_20_192';

const String OQS_SIG_STFL_alg_xmss_shake256_h10_256 = 'XMSS-SHAKE256_10_256';

const String OQS_SIG_STFL_alg_xmss_shake256_h16_256 = 'XMSS-SHAKE256_16_256';

const String OQS_SIG_STFL_alg_xmss_shake256_h20_256 = 'XMSS-SHAKE256_20_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h20_2 = 'XMSSMT-SHA2_20/2_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h20_4 = 'XMSSMT-SHA2_20/4_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h40_2 = 'XMSSMT-SHA2_40/2_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h40_4 = 'XMSSMT-SHA2_40/4_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h40_8 = 'XMSSMT-SHA2_40/8_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h60_3 = 'XMSSMT-SHA2_60/3_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h60_6 = 'XMSSMT-SHA2_60/6_256';

const String OQS_SIG_STFL_alg_xmssmt_sha256_h60_12 = 'XMSSMT-SHA2_60/12_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h20_2 = 'XMSSMT-SHAKE_20/2_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h20_4 = 'XMSSMT-SHAKE_20/4_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h40_2 = 'XMSSMT-SHAKE_40/2_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h40_4 = 'XMSSMT-SHAKE_40/4_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h40_8 = 'XMSSMT-SHAKE_40/8_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h60_3 = 'XMSSMT-SHAKE_60/3_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h60_6 = 'XMSSMT-SHAKE_60/6_256';

const String OQS_SIG_STFL_alg_xmssmt_shake128_h60_12 = 'XMSSMT-SHAKE_60/12_256';

const String OQS_SIG_STFL_alg_lms_sha256_h5_w1 = 'LMS_SHA256_H5_W1';

const String OQS_SIG_STFL_alg_lms_sha256_h5_w2 = 'LMS_SHA256_H5_W2';

const String OQS_SIG_STFL_alg_lms_sha256_h5_w4 = 'LMS_SHA256_H5_W4';

const String OQS_SIG_STFL_alg_lms_sha256_h5_w8 = 'LMS_SHA256_H5_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w1 = 'LMS_SHA256_H10_W1';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w2 = 'LMS_SHA256_H10_W2';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w4 = 'LMS_SHA256_H10_W4';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w8 = 'LMS_SHA256_H10_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w1 = 'LMS_SHA256_H15_W1';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w2 = 'LMS_SHA256_H15_W2';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w4 = 'LMS_SHA256_H15_W4';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w8 = 'LMS_SHA256_H15_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w1 = 'LMS_SHA256_H20_W1';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w2 = 'LMS_SHA256_H20_W2';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w4 = 'LMS_SHA256_H20_W4';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w8 = 'LMS_SHA256_H20_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h25_w1 = 'LMS_SHA256_H25_W1';

const String OQS_SIG_STFL_alg_lms_sha256_h25_w2 = 'LMS_SHA256_H25_W2';

const String OQS_SIG_STFL_alg_lms_sha256_h25_w4 = 'LMS_SHA256_H25_W4';

const String OQS_SIG_STFL_alg_lms_sha256_h25_w8 = 'LMS_SHA256_H25_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h5_w8_h5_w8 = 'LMS_SHA256_H5_W8_H5_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w4_h5_w8 =
    'LMS_SHA256_H10_W4_H5_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w8_h5_w8 =
    'LMS_SHA256_H10_W8_H5_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w2_h10_w2 =
    'LMS_SHA256_H10_W2_H10_W2';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w4_h10_w4 =
    'LMS_SHA256_H10_W4_H10_W4';

const String OQS_SIG_STFL_alg_lms_sha256_h10_w8_h10_w8 =
    'LMS_SHA256_H10_W8_H10_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w8_h5_w8 =
    'LMS_SHA256_H15_W8_H5_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w8_h10_w8 =
    'LMS_SHA256_H15_W8_H10_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h15_w8_h15_w8 =
    'LMS_SHA256_H15_W8_H15_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w8_h5_w8 =
    'LMS_SHA256_H20_W8_H5_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w8_h10_w8 =
    'LMS_SHA256_H20_W8_H10_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w8_h15_w8 =
    'LMS_SHA256_H20_W8_H15_W8';

const String OQS_SIG_STFL_alg_lms_sha256_h20_w8_h20_w8 =
    'LMS_SHA256_H20_W8_H20_W8';

const int OQS_SIG_STFL_algs_length = 70;
